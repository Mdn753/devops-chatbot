---
# auto_dashboard.yml  —  API-only dashboard bootstrap
# ---------------------------------------------------
# Requires:
#   • an “ansible” API user (created by your earlier bootstrap)
#   • Zabbix 6.x/7.x reachable at zbx_api_url
#
# Run example:
#   ansible-playbook auto_dashboard.yml \
#       -e 'zbx_api_url=http://10.0.0.42/zabbix/api_jsonrpc.php' \
#       -e 'zbx_api_password=SuperSecret!' \
#       -e 'target_host=srv-01'
#
# Optional extra-vars:
#   cpu_item_key        (defaults to 1-min load)
#   build_filesys_graph (true/false)

- name: Build Zabbix dashboard via API only
  hosts: localhost
  connection: local
  gather_facts: false

  #################################################################
  # Mandatory variables – pass them in inventory or with -e
  #################################################################
  vars:
    # -- you MUST supply this, e.g. http://10.0.0.42/zabbix/api_jsonrpc.php
    zbx_api_url: "{{ zbx_api_url | default(omit) }}"
    zbx_api_user: ansible
    zbx_api_password: "{{ zbx_api_password | default(omit) }}"

    # -- dashboard specifics (override if you like)
    target_host: "{{ target_host | default('srv-01') }}"
    cpu_item_key: "{{ cpu_item_key | default('system.cpu.load[percpu,avg1]') }}"
    build_filesys_graph: "{{ build_filesys_graph | default(false) | bool }}"

    dashboard_name: "Auto Dashboard for {{ target_host }}"
    dashboard_period: 900
    dashboard_auto: 0

  #################################################################
  # Fail fast if mandatory vars are missing
  #################################################################
  tasks:
    - name: Sanity-check required variables
      fail:
        msg: "You must pass zbx_api_url and zbx_api_password (e.g. with -e)"
      when: zbx_api_url is undefined or zbx_api_password is undefined

    #################################################################
    # 1  Login
    #################################################################
    - name: Login to Zabbix API
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.login
          params:
            username: "{{ zbx_api_user }}"
            password: "{{ zbx_api_password }}"
          id: 1
        headers:
          Content-Type: application/json-rpc
      register: login
      failed_when: login.json.error is defined

    - set_fact:
        zbx_token: "{{ login.json.result }}"

    #################################################################
    # 2  hostid
    #################################################################
    - name: Get hostid for {{ target_host }}
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  host.get
          params:
            filter:
              host: [ "{{ target_host }}" ]
            output: [ "hostid" ]
          auth: "{{ zbx_token }}"
          id: 2
        headers:
          Content-Type: application/json-rpc
      register: host_info

    - fail:
        msg: "Host {{ target_host }} not found in Zabbix."
      when: host_info.json.result | length == 0

    - set_fact:
        host_id: "{{ host_info.json.result[0].hostid }}"

    #################################################################
    # 3  itemid for CPU load
    #################################################################
    - name: Get itemid for key {{ cpu_item_key }}
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  item.get
          params:
            hostids: [ "{{ host_id }}" ]
            search:  { key_: "{{ cpu_item_key }}" }
            output:  [ "itemid" ]
          auth: "{{ zbx_token }}"
          id: 3
        headers:
          Content-Type: application/json-rpc
      register: item_info

    - fail:
        msg: "Item key {{ cpu_item_key }} not found on host {{ target_host }}."
      when: item_info.json.result | length == 0

    - set_fact:
        cpu_itemid: "{{ item_info.json.result[0].itemid }}"

    #################################################################
    # 4  Optional classic graph for filesystems
    #################################################################
    - name: Maybe create filesystem graph
      when: build_filesys_graph
      block:
        - name: Look for existing FS graph
          uri:
            url: "{{ zbx_api_url }}"
            method: POST
            body_format: json
            body:
              jsonrpc: "2.0"
              method:  graph.get
              params:
                hostids: [ "{{ host_id }}" ]
                search:  { name: "Filesystem usage (%)" }
                output:  [ "graphid" ]
              auth: "{{ zbx_token }}"
              id: 4
            headers:
              Content-Type: application/json-rpc
          register: fs_graph

        - name: Create FS graph if absent (example pie, adjust items!)
          when: fs_graph.json.result | length == 0
          uri:
            url: "{{ zbx_api_url }}"
            method: POST
            body_format: json
            body:
              jsonrpc: "2.0"
              method:  graph.create
              params:
                name:   "Filesystem usage (%)"
                width:  900
                height: 300
                gtype:  2                    # pie
                items:
                  - itemid: "{{ cpu_itemid }}"  # example placeholder
                    color: "00AA00"
              auth: "{{ zbx_token }}"
              id: 4b
            headers:
              Content-Type: application/json-rpc
          register: fs_graph_created
          failed_when: fs_graph_created.json.error is defined

        - set_fact:
            fs_graphid: >-
              {{ (fs_graph.json.result[0].graphid
                  if fs_graph.json.result | length > 0
                  else fs_graph_created.json.result.graphids[0]) }}

    #################################################################
    # 5  Widget list
    #################################################################
    - set_fact:
        widgets:
          - type: graph
            name: CPU load (1 min)
            x: 0
            y: 0
            width: 12
            height: 6
            fields:
              - type: 1
                name: itemid
                value: "{{ cpu_itemid }}"
          - type: problems
            name: Current Problems
            x: 12
            y: 0
            width: 12
            height: 6
            fields: []

    - set_fact:
        widgets: >-
          {{ widgets + [ {
              'type': 'graph',
              'name': 'Filesystem usage (%)',
              'x': 0, 'y': 6, 'width': 24, 'height': 6,
              'fields': [ { 'type': 2, 'name': 'graphid', 'value': fs_graphid } ]
            } ] }}
      when: build_filesys_graph

    #################################################################
    # 6  Dashboard create / update
    #################################################################
    - name: Lookup dashboard "{{ dashboard_name }}"
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  dashboard.get
          params:
            filter:
              name: [ "{{ dashboard_name }}" ]
            output: [ "dashboardid" ]
          auth: "{{ zbx_token }}"
          id: 6
        headers:
          Content-Type: application/json-rpc
      register: db_lookup

    - name: Create dashboard
      when: db_lookup.json.result | length == 0
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  dashboard.create
          params:
            name: "{{ dashboard_name }}"
            display_period: "{{ dashboard_period }}"
            auto_start: "{{ dashboard_auto }}"
            widgets: "{{ widgets }}"
          auth: "{{ zbx_token }}"
          id: 6c
        headers:
          Content-Type: application/json-rpc
      register: db_create
      failed_when: db_create.json.error is defined

    - name: Update dashboard
      when: db_lookup.json.result | length > 0
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  dashboard.update
          params:
            dashboardid: "{{ db_lookup.json.result[0].dashboardid }}"
            name: "{{ dashboard_name }}"
            display_period: "{{ dashboard_period }}"
            auto_start: "{{ dashboard_auto }}"
            widgets: "{{ widgets }}"
          auth: "{{ zbx_token }}"
          id: 6u
        headers:
          Content-Type: application/json-rpc
      register: db_update
      failed_when: db_update.json.error is defined

    #################################################################
    # 7  Done
    #################################################################
    - debug:
        msg: "Dashboard '{{ dashboard_name }}' deployed via API (no GUI needed)."
