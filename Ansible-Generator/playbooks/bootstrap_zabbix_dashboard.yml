---
# cluster-dashboard.yml
# ------------------------------------------------------------------
# Creates or updates a Zabbix dashboard named “Cluster Overview”
# filtered to a single host group via API only (no GUI).
#
# Required extra-vars:
#   zbx_api_url       : Zabbix JSON-RPC URL, e.g. http://10.0.0.42/zabbix/api_jsonrpc.php
#   zbx_api_password  : Password for the “ansible” API user
#
# Optional overrides:
#   host_group        : name of the host group (default: Linux)
#   dashboard_name    : name of the dashboard (default: Cluster Overview)
#   dashboard_period  : display period in seconds (default: 900)
#   dashboard_auto    : auto-start slideshow (1=yes, 0=no; default: 1)

- name: Provision Zabbix cluster dashboard
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # — Zabbix connection (must supply these)
    zbx_api_url:       "{{ zbx_api_url | default(omit) }}"
    zbx_api_user:      "ansible"
    zbx_api_password:  "{{ zbx_api_password | default(omit) }}"

    # — Dashboard settings
    host_group:        "Linux"
    dashboard_name:    "Cluster Overview"
    dashboard_period:  900
    dashboard_auto:    1

  tasks:
    - name: Fail if required vars are missing
      fail:
        msg: |
          Missing required variables. Provide:
            • zbx_api_url
            • zbx_api_password
      when: zbx_api_url is undefined or zbx_api_password is undefined

    - name: Login to Zabbix API
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.login
          params:
            username: "{{ zbx_api_user }}"
            password: "{{ zbx_api_password }}"
          id: 1
        headers:
          Content-Type: application/json-rpc
      register: login
      failed_when: login.json.error is defined

    - name: Set auth token
      set_fact:
        zbx_token: "{{ login.json.result }}"

    - name: Get groupid for host group "{{ host_group }}"
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  hostgroup.get
          params:
            filter:
              name: [ "{{ host_group }}" ]
            output: ["groupid"]
          auth: "{{ zbx_token }}"
          id: 2
        headers:
          Content-Type: application/json-rpc
      register: grp
    - set_fact:
        group_id: "{{ grp.json.result[0].groupid }}"   # :contentReference[oaicite:0]{index=0}

    - name: Check if dashboard "{{ dashboard_name }}" exists
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  dashboard.get
          params:
            filter:
              name: [ "{{ dashboard_name }}" ]
            output: ["dashboardid"]
          auth: "{{ zbx_token }}"
          id: 3
        headers:
          Content-Type: application/json-rpc
      register: existing

    - set_fact:
        dashboard_id: "{{ existing.json.result[0].dashboardid | default(omit) }}"

    - name: Assemble widget list
      set_fact:
        widgets:
          # 1) Problems widget
          - type: problems
            name: "Cluster Problems"
            x: 0
            y: 0
            width: 12
            height: 6
            fields:
              - type: 2
                name: groupids
                value: "{{ group_id }}"
          # 2) Host availability widget
          - type: hostavail
            name: "Cluster Availability"
            x: 12
            y: 0
            width: 12
            height: 6
            fields:
              - type: 2
                name: groupids.0
                value: "{{ group_id }}"    # :contentReference[oaicite:1]{index=1}

    - name: Create new dashboard if absent
      when: dashboard_id is not defined
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  dashboard.create
          params:
            name: "{{ dashboard_name }}"
            display_period: "{{ dashboard_period }}"
            auto_start: "{{ dashboard_auto }}"
            widgets: "{{ widgets }}"
          auth: "{{ zbx_token }}"
          id: 4
        headers:
          Content-Type: application/json-rpc
      register: dash_create
      failed_when: dash_create.json.error is defined     # :contentReference[oaicite:2]{index=2}

    - name: Update existing dashboard if found
      when: dashboard_id is defined
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  dashboard.update
          params:
            dashboardid: "{{ dashboard_id }}"
            name: "{{ dashboard_name }}"
            display_period: "{{ dashboard_period }}"
            auto_start: "{{ dashboard_auto }}"
            widgets: "{{ widgets }}"
          auth: "{{ zbx_token }}"
          id: 5
        headers:
          Content-Type: application/json-rpc
      register: dash_update
      failed_when: dash_update.json.error is defined      # :contentReference[oaicite:3]{index=3}

    - name: Dashboard deployment summary
      debug:
        msg: >-
          Dashboard '{{ dashboard_name }}'
          {{ 'created' if dashboard_id is not defined else 'updated' }}
          successfully.
