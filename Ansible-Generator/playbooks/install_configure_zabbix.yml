---
- name: Install and configure Zabbix 5.0 LTS (MySQL/MariaDB)
  hosts: all
  become: true
  gather_facts: true

  collections:
    - community.mysql                # mysql_db / mysql_user modules

  vars:
    # ── Zabbix & DB credentials ──────────────────────────────
    zabbix_version: "5.0"

    zabbix_db_name: zabbix
    zabbix_db_user: zabbix
    zabbix_db_pass: zabbix_password   # ← vault / override in production

    php_timezone:  Africa/Casablanca

    # Debian/Ubuntu signing-key paths
    zbx_key_url:  https://repo.zabbix.com/zabbix-official-repo.key
    zbx_key_asc:  /usr/share/keyrings/zabbix.asc
    zbx_keyring:  /usr/share/keyrings/zabbix.gpg

  tasks:
  # ───────────────────────────────────────────────────────────
  # Repositories & keys
  # ───────────────────────────────────────────────────────────
  - name: Add Zabbix repo (RHEL family)
    ansible.builtin.yum:
      name: >-
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/rhel/
        {{ ansible_distribution_major_version }}/x86_64/
        zabbix-release-{{ zabbix_version }}-1.el{{ ansible_distribution_major_version }}.noarch.rpm
      state: present
    when: ansible_os_family == "RedHat"

  - name: Enable EPEL (RHEL family)
    ansible.builtin.yum:
      name: epel-release
      state: present
    when: ansible_os_family == "RedHat"

  - name: Ensure gnupg present (Debian/Ubuntu)
    ansible.builtin.apt:
      name: gnupg
      state: present
      update_cache: true
    when: ansible_os_family == "Debian"

  - name: Map Ubuntu codename → Zabbix-supported series
    ansible.builtin.set_fact:
      zbx_ubuntu_series: >-
        {{ {'jammy':'jammy','focal':'focal','bionic':'bionic'}
           .get(ansible_distribution_release,'jammy') }}
    when: ansible_os_family == "Debian"

  - name: Download Zabbix ASCII key
    ansible.builtin.get_url:
      url:  "{{ zbx_key_url }}"
      dest: "{{ zbx_key_asc }}"
      mode: "0644"
    when: ansible_os_family == "Debian"

  - name: Convert key to keyring
    ansible.builtin.command:
      cmd: "gpg --dearmor -o {{ zbx_keyring }} {{ zbx_key_asc }}"
    args:
      creates: "{{ zbx_keyring }}"
    when: ansible_os_family == "Debian"

  - name: Add Zabbix APT repository
    ansible.builtin.apt_repository:
      repo: >-
        deb [arch=amd64 signed-by={{ zbx_keyring }}]
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/ubuntu
        {{ zbx_ubuntu_series }} main
      filename: zabbix
      state: present
      update_cache: true
    when: ansible_os_family == "Debian"

  # ───────────────────────────────────────────────────────────
  # OS-specific paths / package names
  # ───────────────────────────────────────────────────────────
  - name: Set distro-specific variables
    ansible.builtin.set_fact:
      zbx_frontend_pkg: >-
        {{ 'zabbix-web-mysql' if ansible_os_family == 'RedHat'
                              else 'zabbix-frontend-php' }}
      zbx_web_srv: >-
        {{ 'httpd' if ansible_os_family == 'RedHat'
                   else 'apache2' }}
      zbx_apache_conf: >-
        {{ '/etc/httpd/conf.d/zabbix.conf'
           if ansible_os_family == 'RedHat'
           else '/etc/apache2/conf-available/zabbix.conf' }}
      mysql_socket: >-
        {{ '/var/lib/mysql/mysql.sock'
           if ansible_os_family == 'RedHat'
           else '/var/run/mysqld/mysqld.sock' }}

  # ───────────────────────────────────────────────────────────
  # Package installation
  # ───────────────────────────────────────────────────────────
  - name: Install Zabbix server, agent, MariaDB & dependencies
    ansible.builtin.package:
      name:
        - zabbix-server-mysql
        - "{{ zbx_frontend_pkg }}"
        - zabbix-agent
        - mariadb-server
        - >-
          {{ 'python3-PyMySQL' if ansible_os_family == 'RedHat'
                               else 'python3-pymysql' }}
      state: present
      update_cache: true

  # ───────────────────────────────────────────────────────────
  # MariaDB initialisation
  # ───────────────────────────────────────────────────────────
  - name: Ensure MariaDB running & enabled
    ansible.builtin.service:
      name: mariadb
      state: started
      enabled: true

  - name: Wait for MariaDB socket
    ansible.builtin.wait_for:
      path: "{{ mysql_socket }}"
      state: started
      timeout: 30

  - name: Secure MariaDB installation (set root password)
    community.mysql.mysql_user:
      name: root
      host: localhost
      password: "{{ zabbix_db_pass }}"
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"
      state: present
    ignore_errors: true

  - name: Create Zabbix database
    community.mysql.mysql_db:
      name: "{{ zabbix_db_name }}"
      state: present
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"
      encoding: utf8
      collation: utf8_general_ci

  - name: Create / update Zabbix DB user (mysql_native_password)
    community.mysql.mysql_user:
      name: "{{ zabbix_db_user }}"
      host: localhost                  # matches DBHost below
      password: "{{ zabbix_db_pass }}"
      plugin: mysql_native_password
      priv: "{{ zabbix_db_name }}.*:ALL"
      state: present
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"

  - name: Check if Zabbix schema already imported
    ansible.builtin.stat:
      path: "/var/lib/mysql/{{ zabbix_db_name }}/history.ibd"
    register: schema_check

  - name: Find Zabbix schema file
    ansible.builtin.find:
      paths: 
        - /usr/share/doc/zabbix-server-mysql*
        - /usr/share/zabbix-server-mysql
      patterns: "create.sql.gz"
      recurse: true
    register: schema_file
    when: not schema_check.stat.exists

  - name: Import initial Zabbix schema (only if not exists)
    ansible.builtin.shell: |
      gzip -dc "{{ schema_file.files[0].path }}" | \
      mysql --socket={{ mysql_socket }} -u root {{ zabbix_db_name }}
    when: 
      - not schema_check.stat.exists
      - schema_file.files | length > 0
    register: schema_import
    failed_when: schema_import.rc != 0

  - name: Verify schema import
    community.mysql.mysql_query:
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"
      login_db: "{{ zabbix_db_name }}"
      query: "SHOW TABLES LIKE 'users'"
    register: schema_verify

  - name: Fail if schema not properly imported
    ansible.builtin.fail:
      msg: "Zabbix database schema was not imported correctly"
    when: schema_verify.rowcount[0] == 0

  # ───────────────────────────────────────────────────────────
  # Zabbix server configuration  (TCP on localhost)
  # ───────────────────────────────────────────────────────────
  - name: Stop zabbix-server before configuration
    ansible.builtin.service:
      name: zabbix-server
      state: stopped
    ignore_errors: true

  - name: Configure /etc/zabbix/zabbix_server.conf
    ansible.builtin.blockinfile:
      path: /etc/zabbix/zabbix_server.conf
      marker: "# {mark} ANSIBLE MANAGED DB BLOCK"
      block: |
        DBHost=127.0.0.1
        DBPort=3306
        DBName={{ zabbix_db_name }}
        DBUser={{ zabbix_db_user }}
        DBPassword={{ zabbix_db_pass }}
        StartPollers=5
        StartTrappers=5
        StartPingers=1
        StartDiscoverers=1
        StartHTTPPollers=1
        StartTimers=1
        StartEscalators=1
        CacheSize=8M
        HistoryCacheSize=16M
        HistoryIndexCacheSize=4M
        TrendCacheSize=4M
        ValueCacheSize=8M
        Timeout=4
        TrapperTimeout=300
        UnreachablePeriod=45
        UnavailableDelay=60
        UnreachableDelay=15
        AlertScriptsPath=/usr/lib/zabbix/alertscripts
        ExternalScripts=/usr/lib/zabbix/externalscripts
        LogFile=/var/log/zabbix/zabbix_server.log
        LogFileSize=10
        PidFile=/var/run/zabbix/zabbix_server.pid
        SocketDir=/var/run/zabbix
        DBSocket={{ mysql_socket }}
    notify: restart zabbix-server

  - name: Set correct permissions for zabbix directories
    ansible.builtin.file:
      path: "{{ item }}"
      owner: zabbix
      group: zabbix
      mode: '0755'
      state: directory
    loop:
      - /var/log/zabbix
      - /var/run/zabbix
    ignore_errors: true

  - name: Create zabbix log file with correct permissions
    ansible.builtin.file:
      path: /var/log/zabbix/zabbix_server.log
      owner: zabbix
      group: zabbix
      mode: '0644'
      state: touch

  # ───────────────────────────────────────────────────────────
  # PHP front-end timezone tweak
  # ───────────────────────────────────────────────────────────
  - name: Check Apache conf exists
    ansible.builtin.stat:
      path: "{{ zbx_apache_conf }}"
    register: zbx_conf_stat

  - name: Ensure PHP timezone in Apache conf
    ansible.builtin.lineinfile:
      path: "{{ zbx_apache_conf }}"
      regexp: '^php_value +date.timezone'
      line:  "php_value date.timezone {{ php_timezone }}"
    when: zbx_conf_stat.stat.exists
    notify: restart webserver

  - name: Enable zabbix apache configuration (Ubuntu/Debian)
    ansible.builtin.command:
      cmd: a2enconf zabbix
    when: 
      - ansible_os_family == "Debian"
      - zbx_conf_stat.stat.exists
    notify: restart webserver

  # ───────────────────────────────────────────────────────────
  # Enable & start services
  # ───────────────────────────────────────────────────────────
  - name: Enable & start web server
    ansible.builtin.service:
      name: "{{ zbx_web_srv }}"
      state: started
      enabled: true

  - name: Enable zabbix-server (don't start yet)
    ansible.builtin.service:
      name: zabbix-server
      enabled: true

  - name: Test zabbix-server configuration
    ansible.builtin.command:
      cmd: /usr/sbin/zabbix_server -t
    register: zabbix_test
    failed_when: zabbix_test.rc != 0
    changed_when: false

  - name: Start zabbix-server if config is valid
    ansible.builtin.service:
      name: zabbix-server
      state: started
    when: zabbix_test.rc == 0

  - name: Enable & start zabbix-agent
    ansible.builtin.service:
      name: zabbix-agent
      state: started
      enabled: true

  - name: Wait for zabbix-server to be ready
    ansible.builtin.wait_for:
      port: 10051
      host: 127.0.0.1
      delay: 5
      timeout: 60
    ignore_errors: true

  - name: Check zabbix-server status
    ansible.builtin.service:
      name: zabbix-server
    register: zabbix_status

  - name: Display zabbix-server status
    ansible.builtin.debug:
      msg: "Zabbix server status: {{ zabbix_status.status.ActiveState }}"

  # ───────────────────────────────────────────────────────────
  # Handlers
  # ───────────────────────────────────────────────────────────
  handlers:
    - name: restart zabbix-server
      ansible.builtin.service:
        name: zabbix-server
        state: restarted

    - name: restart webserver
      ansible.builtin.service:
        name: "{{ zbx_web_srv }}"
        state: restarted