---
# host-register.yml  —  create / update a VM in Zabbix (with both active & passive templates)

- name: Register VM in Zabbix via API
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # Zabbix API connection
    zbx_api_url:       "{{ zbx_api_url | default(omit) }}"
    zbx_api_user:      "ansible"
    zbx_api_password:  "{{ zbx_api_password | default(omit) }}"

    # Host to register (must be passed via extra_vars)
    vm_name:           "{{ vm_name   | default(omit) }}"
    vm_ip:             "{{ vm_ip     | default(omit) }}"

    # Inventory defaults
    host_group:        "Linux"
    active_template:   "Linux by Zabbix agent active"
    passive_template:  "Template App Zabbix Agent"

  tasks:
    # 0) Sanity check
    - name: Fail if required vars are missing
      fail:
        msg: |
          Missing required variables. Provide:
            • zbx_api_url
            • zbx_api_password
            • vm_name
            • vm_ip
      when: >
        zbx_api_url is undefined or
        zbx_api_password is undefined or
        vm_name is undefined or
        vm_ip is undefined

    # 1) Login
    - name: Login to Zabbix API
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.login
          params:
            username: "{{ zbx_api_user }}"
            password: "{{ zbx_api_password }}"
          id: 1
        headers:
          Content-Type: application/json-rpc
      register: login_rsp
      failed_when: login_rsp.json.error is defined

    - set_fact:
        zbx_token: "{{ login_rsp.json.result }}"

    # 2) Ensure host-group exists → group_id
    - name: Ensure host-group {{ host_group }} exists
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  hostgroup.create
          params:
            name: "{{ host_group }}"
          auth: "{{ zbx_token }}"
          id: 2
        headers:
          Content-Type: application/json-rpc
        status_code: [200, 412]
      register: grp_create

    - name: Get group_id for {{ host_group }}
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  hostgroup.get
          params:
            filter: { name: [ "{{ host_group }}" ] }
            output: [ "groupid" ]
          auth: "{{ zbx_token }}"
          id: 2.1
        headers:
          Content-Type: application/json-rpc
      register: grp_get

    - set_fact:
        group_id: "{{ grp_get.json.result[0].groupid }}"

    # 3) Lookup both template IDs
    - name: Get active-template ID ("{{ active_template }}")
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  template.get
          params:
            filter: { name: [ "{{ active_template }}" ] }
            output: [ "templateid" ]
          auth: "{{ zbx_token }}"
          id: 3
        headers:
          Content-Type: application/json-rpc
      register: tmpl_active

    - name: Fail if active template not found
      fail:
        msg: "Active template '{{ active_template }}' not found."
      when: tmpl_active.json.result | length == 0

    - name: Get passive-template ID ("{{ passive_template }}")
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  template.get
          params:
            filter: { name: [ "{{ passive_template }}" ] }
            output: [ "templateid" ]
          auth: "{{ zbx_token }}"
          id: 3.1
        headers:
          Content-Type: application/json-rpc
      register: tmpl_passive

    - name: Fail if passive template not found
      fail:
        msg: "Passive template '{{ passive_template }}' not found."
      when: tmpl_passive.json.result | length == 0

    - set_fact:
        active_id:  "{{ tmpl_active.json.result[0].templateid }}"
        passive_id: "{{ tmpl_passive.json.result[0].templateid }}"

    # 4) Check if host already exists
    - name: host.get for {{ vm_name }}
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  host.get
          params:
            filter: { host: [ "{{ vm_name }}" ] }
            output: [ "hostid" ]
          auth: "{{ zbx_token }}"
          id: 4
        headers:
          Content-Type: application/json-rpc
      register: host_lookup

    - set_fact:
        existing_hostid: "{{ host_lookup.json.result[0].hostid }}"
      when: host_lookup.json.result | length > 0

    # 5A) Create new host if missing
    - name: Create host {{ vm_name }}
      when: existing_hostid is undefined
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  host.create
          params:
            host:        "{{ vm_name }}"
            name:        "{{ vm_name }}"
            interfaces:
              - type: 1
                main: 1
                useip: 1
                ip: "{{ vm_ip }}"
                dns: ""
                port: "10050"
            groups:   [ { groupid: "{{ group_id }}" } ]
            templates:
              - templateid: "{{ active_id }}"
              - templateid: "{{ passive_id }}"
            description: "Auto-registered by AWX"
          auth: "{{ zbx_token }}"
          id: 5
        headers:
          Content-Type: application/json-rpc
      register: host_create
      failed_when: host_create.json.error is defined

    # 5B) Update existing host if found
    - name: Update host {{ vm_name }}
      when: existing_hostid is defined
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  host.update
          params:
            hostid:      "{{ existing_hostid }}"
            name:        "{{ vm_name }}"
            interfaces:
              - type: 1
                main: 1
                useip: 1
                ip: "{{ vm_ip }}"
                dns: ""
                port: "10050"
            groups:   [ { groupid: "{{ group_id }}" } ]
            templates:
              - templateid: "{{ active_id }}"
              - templateid: "{{ passive_id }}"
          auth: "{{ zbx_token }}"
          id: 6
        headers:
          Content-Type: application/json-rpc
      register: host_update
      failed_when: host_update.json.error is defined

    # 6) Summary
    - name: Registration summary
      debug:
        msg: >-
          Host '{{ vm_name }}' {{ 'created' if existing_hostid is undefined else 'updated' }}
          with templates [active={{ active_id }}, passive={{ passive_id }}]
          in group '{{ host_group }}'.
