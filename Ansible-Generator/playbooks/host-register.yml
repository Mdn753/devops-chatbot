---
# host-register.yml — create or update a VM in Zabbix with passive‐agent template

- name: Register VM in Zabbix via API
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # Zabbix API connection (pass these via extra_vars)
    zbx_api_url:       "{{ zbx_api_url       | default(omit) }}"
    zbx_api_user:      "ansible"
    zbx_api_password:  "{{ zbx_api_password | default(omit) }}"

    # VM info (pass via extra_vars)
    vm_name:           "{{ vm_name | default(omit) }}"
    vm_ip:             "{{ vm_ip   | default(omit) }}"

    # Defaults
    host_group:        "Linux"
    template_name:     "Linux by Zabbix agent"

  tasks:
    # 0) Sanity check
    - name: Fail if required vars are missing
      fail:
        msg: |
          Missing required variables. Provide:
            • zbx_api_url
            • zbx_api_password
            • vm_name
            • vm_ip
      when: >
        zbx_api_url is undefined or
        zbx_api_password is undefined or
        vm_name is undefined or
        vm_ip is undefined

    # 1) Login
    - name: Login to Zabbix API
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.login
          params:
            username: "{{ zbx_api_user }}"
            password: "{{ zbx_api_password }}"
          id: 1
      register: login_rsp
      failed_when: login_rsp.json.error is defined

    - name: Set auth token
      set_fact:
        zbx_token: "{{ login_rsp.json.result }}"

    # 2) Ensure host-group exists → group_id
    - name: Ensure host-group "{{ host_group }}" exists
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  hostgroup.create
          params:
            name: "{{ host_group }}"
          auth: "{{ zbx_token }}"
          id: 2
        status_code: [200, 412]
      register: grp_create

    - name: Get group_id for "{{ host_group }}"
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  hostgroup.get
          params:
            filter:
              name: [ "{{ host_group }}" ]
            output: [ "groupid" ]
          auth: "{{ zbx_token }}"
          id: 2.1
      register: grp_get

    - name: Set group_id fact
      set_fact:
        group_id: "{{ grp_get.json.result[0].groupid }}"

    # 3) Lookup passive‐agent template ID
    - name: Get template_id for "{{ template_name }}"
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  template.get
          params:
            filter:
              name: [ "{{ template_name }}" ]
            output: [ "templateid" ]
          auth: "{{ zbx_token }}"
          id: 3
      register: tmpl_get

    - name: Fail if template not found
      fail:
        msg: "Template '{{ template_name }}' not found in Zabbix."
      when: tmpl_get.json.result | length == 0

    - name: Set template_id fact
      set_fact:
        template_id: "{{ tmpl_get.json.result[0].templateid }}"

    # 4) Check if host exists
    - name: Check for existing host "{{ vm_name }}"
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  host.get
          params:
            filter:
              host: [ "{{ vm_name }}" ]
            output: [ "hostid" ]
          auth: "{{ zbx_token }}"
          id: 4
      register: host_lookup

    - name: Set existing_hostid fact (if any)
      set_fact:
        existing_hostid: "{{ host_lookup.json.result[0].hostid }}"
      when: host_lookup.json.result | length > 0

    # 5A) Create host if missing
    - name: Create host "{{ vm_name }}"
      when: existing_hostid is not defined
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  host.create
          params:
            host: "{{ vm_name }}"
            name: "{{ vm_name }}"
            interfaces:
              - type: 1
                main: 1
                useip: 1
                ip: "{{ vm_ip }}"
                dns: ""
                port: "10050"
            groups:
              - groupid: "{{ group_id }}"
            templates:
              - templateid: "{{ template_id }}"
            description: "Auto-registered by AWX"
          auth: "{{ zbx_token }}"
          id: 5
      register: host_create
      failed_when: host_create.json.error is defined

    # 5B) Update host if exists
    - name: Update host "{{ vm_name }}"
      when: existing_hostid is defined
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        headers:
          Content-Type: application/json-rpc
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  host.update
          params:
            hostid: "{{ existing_hostid }}"
            name:   "{{ vm_name }}"
            interfaces:
              - type: 1
                main: 1
                useip: 1
                ip: "{{ vm_ip }}"
                dns: ""
                port: "10050"
            groups:
              - groupid: "{{ group_id }}"
            templates:
              - templateid: "{{ template_id }}"
          auth: "{{ zbx_token }}"
          id: 6
      register: host_update
      failed_when: host_update.json.error is defined

    # 6) Summary
    - name: Registration summary
      debug:
        msg: >-
          Host '{{ vm_name }}'
          {{ 'created' if existing_hostid is not defined else 'updated' }}
          in group '{{ host_group }}' using template '{{ template_name }}'.
