---
# bootstrap_zabbix_api.yml – AWX-compatible (Zabbix ≥ 6.0)
# --------------------------------------------------------
# • Idempotently configures the Zabbix GUI
# • Creates/updates an “ansible” API **super-admin** user
# • Registers the current host in the “Linux” host-group
#
# NOTE (July 2025) – API changes in Zabbix 6.x +
#   • alias   → username   (all user filters / creates / updates)
#   • type    → roleid     (choose a User Role instead of the old type=3)
#   • passwd  is STILL the correct field for the user’s password
#     (“password” is rejected)

- name: Bootstrap Zabbix GUI via API
  hosts: all
  become: true
  gather_facts: true

  #################################################################
  # Variables (override from installer playbook or tower survey)
  #################################################################
  vars:
    zbx_db_host:        localhost
    zbx_db_name:        "{{ zabbix_db_name      | default('zabbix') }}"
    zbx_db_user:        "{{ zabbix_db_user      | default('zabbix') }}"
    zbx_db_password:    "{{ zabbix_db_password  | default('StrongDBpass!') }}"

    zbx_api_url:        "http://{{ ansible_default_ipv4.address }}/zabbix/api_jsonrpc.php"

    zbx_admin_user:     Admin
    zbx_admin_pass:     "{{ zabbix_admin_password | default('zabbix') }}"

    zbx_api_user:       ansible
    zbx_api_password:   "{{ zabbix_api_password  | default('admin@123') }}"

    # main config file & helper symlink
    zbx_etc_conf:       /etc/zabbix/zabbix.conf.php
    zbx_share_conf_dir: /usr/share/zabbix/conf
    zbx_share_conf:     "{{ zbx_share_conf_dir }}/zabbix.conf.php"

    python_interpreter_path: "/usr/bin/python3"

  #################################################################
  # TASKS
  #################################################################
  tasks:

  ## 0 ─ Execution environment info
  - name: Display execution environment info
    debug:
      msg:
        - "Running on: {{ inventory_hostname }}"
        - "Target IP: {{ ansible_default_ipv4.address }}"
        - "API URL : {{ zbx_api_url }}"
        - "Python  : {{ python_interpreter_path }}"
    tags: always

  ## 0 ─ Write GUI config (unchanged)
  - name: Ensure /etc/zabbix exists
    file:
      path: /etc/zabbix
      state: directory
      owner: www-data
      group: www-data
      mode: "0755"
    tags: config

  - name: Create / update front-end config
    copy:
      dest:   "{{ zbx_etc_conf }}"
      owner:  www-data
      group:  www-data
      mode:   "0640"
      content: |
        <?php
        // Zabbix GUI configuration – Generated by Ansible
        $DB['TYPE']     = 'MYSQL';
        $DB['SERVER']   = '{{ zbx_db_host }}';
        $DB['PORT']     = '3306';
        $DB['DATABASE'] = '{{ zbx_db_name }}';
        $DB['USER']     = '{{ zbx_db_user }}';
        $DB['PASSWORD'] = '{{ zbx_db_password }}';

        // Zabbix server connection
        $ZBX_SERVER      = 'localhost';
        $ZBX_SERVER_PORT = '10051';
        $ZBX_SERVER_NAME = 'Zabbix Server ({{ inventory_hostname }})';

        $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
        $DB['DOUBLE_IEEE754'] = true;  // session precision for AWX
        ?>
    register: copy_result
    notify: reload apache2
    tags: config

  - name: Ensure {{ zbx_share_conf_dir }} exists
    file:
      path: "{{ zbx_share_conf_dir }}"
      state: directory
      owner: www-data
      group: www-data
      mode: "0755"
    tags: config

  - name: Link config into /usr/share/zabbix/conf
    file:
      src:  "{{ zbx_etc_conf }}"
      dest: "{{ zbx_share_conf }}"
      state: link
      force: yes
    register: link_result
    notify: reload apache2
    tags: config

  - meta: flush_handlers
    tags: config

  - name: Wait for Apache after reload (if needed)
    wait_for:
      host: "{{ ansible_default_ipv4.address }}"
      port: 80
      timeout: 120
      delay: 2
    when: copy_result.changed or link_result.changed
    tags: config

  ## 1 ─ Check API endpoint
  - name: Wait until Zabbix API is reachable
    wait_for:
      host: "{{ ansible_default_ipv4.address }}"
      port: 80
      timeout: 120
      delay: 5
    tags: api

  - name: Test web interface
    uri:
      url: "http://{{ ansible_default_ipv4.address }}/zabbix/"
      method: GET
      status_code: [200, 302]
      timeout: 30
    register: web_test
    retries: 3
    delay: 10
    tags: api

  ## 2 ─ Login as Admin
  - name: Log in as Admin
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          username: "{{ zbx_admin_user }}"
          password: "{{ zbx_admin_pass }}"
        id: 1
      headers:
        Content-Type: application/json-rpc
    register: admin_login
    retries: 3
    delay: 5
    tags: api

  - name: Ensure admin login succeeded
    fail:
      msg: "Admin login failed – {{ admin_login.json.error | to_nice_json }}"
    when: admin_login.json.error is defined
    tags: api

  - set_fact:
      admin_token: "{{ admin_login.json.result }}"
    tags: api

  #################################################################
  # 2½ ─ Get the roleid of “Super admin role”
  #################################################################
  - name: Lookup “Super admin role”
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  role.get
        params:
          filter:
            name: ["Super admin role"]
          output: ["roleid","name"]
        auth: "{{ admin_token }}"
        id: 2.0
      headers:
        Content-Type: application/json-rpc
    register: super_role
    tags: roles

  - set_fact:
      superadmin_roleid: "{{ super_role.json.result[0].roleid | default('3') }}"
    tags: roles

  #################################################################
  # 3 ─ Ensure “ansible” API user exists
  #################################################################
  - name: Find any existing '{{ zbx_api_user }}' users
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.get
        params:
          filter:
            username: "{{ zbx_api_user }}"
          output: ["userid"]
        auth: "{{ admin_token }}"
        id: 3
      headers:
        Content-Type: application/json-rpc
    register: api_user_lookup
    tags: user

  - name: Delete duplicate '{{ zbx_api_user }}' users (if any)
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.delete
        params: "{{ api_user_lookup.json.result | map(attribute='userid') | list }}"
        auth: "{{ admin_token }}"
        id: 3.1
      headers:
        Content-Type: application/json-rpc
    when: api_user_lookup.json.result | length > 0
    tags: user

  - pause:
      seconds: 5
    when: api_user_lookup.json.result | length > 0
    tags: user

  - name: Create fresh super-admin API user
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.create
        params:
          username: "{{ zbx_api_user }}"
          name:     "Ansible Automation (AWX)"
          passwd:   "{{ zbx_api_password }}"
          roleid:   "{{ superadmin_roleid }}"
          usrgrps:
            - usrgrpid: "7"      # Zabbix administrators (UI group, not role)
        auth: "{{ admin_token }}"
        id: 3.2
      headers:
        Content-Type: application/json-rpc
    register: user_create_result
    tags: user

  - fail:
      msg: "Failed to create ansible user – {{ user_create_result.json.error | to_nice_json }}"
    when: user_create_result.json.error is defined
    tags: user

  - pause:
      seconds: 10
    tags: user

  ## 4 ─ Login as ansible
  - name: Login as '{{ zbx_api_user }}'
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          username: "{{ zbx_api_user }}"
          password: "{{ zbx_api_password }}"
        id: 4
      headers:
        Content-Type: application/json-rpc
    register: api_login
    retries: 10
    delay: 5
    until: api_login.json.result is defined and api_login.json.error is not defined
    tags: user

  - set_fact:
      api_token: "{{ api_login.json.result }}"
    tags: user

  #################################################################
  # 5 ─ Infrastructure objects (Linux group, template IDs)
  #################################################################
  - name: Ensure “Linux” host-group exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  hostgroup.create
        params:
          name: Linux
        auth: "{{ api_token }}"
        id: 5
      headers:
        Content-Type: application/json-rpc
      status_code: [200, 412]
    tags: infrastructure

  - name: Get IDs for group & template
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: batch
        params:
          - method: hostgroup.get
            params:
              filter: { name: ["Linux"] }
              output: ["groupid"]
          - method: template.get
            params:
              filter: { name: ["Linux by Zabbix agent active"] }
              output: ["templateid"]
        auth: "{{ api_token }}"
        id: 6
      headers:
        Content-Type: application/json-rpc
    register: batch_ids
    tags: infrastructure

  - set_fact:
      linux_groupid: "{{ batch_ids.json[0].result[0].groupid }}"
      linux_tmplid:  "{{ batch_ids.json[1].result[0].templateid }}"
    tags: infrastructure

  #################################################################
  # 6 ─ Register / update the current host
  #################################################################
  - name: Check if host already exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  host.get
        params:
          filter: { host: ["{{ inventory_hostname }}"] }
          output: ["hostid"]
        auth: "{{ api_token }}"
        id: 7
      headers:
        Content-Type: application/json-rpc
    register: existing_host
    tags: host

  - name: Register host (create)
    when: existing_host.json.result | length == 0
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.create
        params:
          host: "{{ inventory_hostname }}"
          name: "{{ inventory_hostname }} (AWX Managed)"
          interfaces:
            - type: 1
              main: 1
              useip: 1
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:
            - groupid: "{{ linux_groupid }}"
          templates:
            - templateid: "{{ linux_tmplid }}"
          description: "Host registered by AWX on {{ ansible_date_time.iso8601 }}"
        auth: "{{ api_token }}"
        id: 8
      headers:
        Content-Type: application/json-rpc
    tags: host

  - name: Update host (already exists)
    when: existing_host.json.result | length > 0
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.update
        params:
          hostid: "{{ existing_host.json.result[0].hostid }}"
          name:   "{{ inventory_hostname }} (AWX Managed)"
          interfaces:
            - type: 1
              main: 1
              useip: 1
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:
            - groupid: "{{ linux_groupid }}"
          templates:
            - templateid: "{{ linux_tmplid }}"
          description: "Host updated by AWX on {{ ansible_date_time.iso8601 }}"
        auth: "{{ api_token }}"
        id: 9
      headers:
        Content-Type: application/json-rpc
    tags: host

  #################################################################
  # 7 ─ Final verification & summary
  #################################################################
  - name: Verify host registration
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.get
        params:
          filter: { host: ["{{ inventory_hostname }}"] }
          output: ["hostid","name","status"]
          selectGroups: ["name"]
          selectParentTemplates: ["name"]
        auth: "{{ api_token }}"
        id: 10
      headers:
        Content-Type: application/json-rpc
    register: final_host_check
    tags: verify

  - name: Show final status
    debug:
      msg:
        - "Host ID : {{ final_host_check.json.result[0].hostid }}"
        - "Name    : {{ final_host_check.json.result[0].name }}"
        - "Status  : {{ 'Enabled' if final_host_check.json.result[0].status == '0' else 'Disabled' }}"
        - "Groups  : {{ final_host_check.json.result[0].groups | map(attribute='name') | join(', ') }}"
        - "Templates: {{ final_host_check.json.result[0].parentTemplates | map(attribute='name') | join(', ') }}"
    when: final_host_check.json.result | length > 0
    tags: verify

  - name: Bootstrap completion summary
    debug:
      msg:
        - "=== Zabbix Bootstrap Complete ==="
        - "API user ‘{{ zbx_api_user }}’ present with Super-admin role"
        - "Host registered in ‘Linux’ group – ready for monitoring"
        - "Web UI : http://{{ ansible_default_ipv4.address }}/zabbix/"
    tags: always

#################################################################
# HANDLERS
#################################################################
  handlers:
    - name: reload apache2
      service:
        name: apache2
        state: reloaded
      tags: config
