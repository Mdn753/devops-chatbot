---
# bootstrap_zabbix_api.yml - AWX-compatible version (Zabbix ≥ 6.0)
# ---------------------------------------------------------------
# * Idempotently configures the Zabbix GUI
# * Creates/updates “ansible” API super-admin user
# * Registers the current host in group “Linux”
#
# NOTE (July 2025): Zabbix ≥ 6.0 replaces the old user-field names:
#   • alias   → username
#   • passwd  → password
# This playbook is fully updated for those changes.

- name: Bootstrap Zabbix GUI via API
  hosts: all
  become: true
  gather_facts: true

  #################################################################
  # Variables (imported from installer playbook or defaults)
  #################################################################
  vars:
    zbx_db_host:        localhost
    zbx_db_name:        "{{ zabbix_db_name      | default('zabbix') }}"
    zbx_db_user:        "{{ zabbix_db_user      | default('zabbix') }}"
    zbx_db_password:    "{{ zabbix_db_password  | default('StrongDBpass!') }}"

    zbx_api_url:        "http://{{ ansible_default_ipv4.address }}/zabbix/api_jsonrpc.php"

    zbx_admin_user:     Admin
    zbx_admin_pass:     "{{ zabbix_admin_password | default('zabbix') }}"

    zbx_api_user:       ansible
    zbx_api_password:   "{{ zabbix_api_password | default('admin@123') }}"

    # primary config file & helper symlink
    zbx_etc_conf:       /etc/zabbix/zabbix.conf.php
    zbx_share_conf_dir: /usr/share/zabbix/conf
    zbx_share_conf:     "{{ zbx_share_conf_dir }}/zabbix.conf.php"

    # AWX compatibility settings
    python_interpreter_path: "/usr/bin/python3"

  #################################################################
  # TASKS
  #################################################################
  tasks:
  # 0 ─ Pre-flight checks for AWX environment
  - name: Display execution environment info
    debug:
      msg:
        - "Running on: {{ inventory_hostname }}"
        - "Target IP: {{ ansible_default_ipv4.address }}"
        - "API URL: {{ zbx_api_url }}"
        - "Python interpreter: {{ python_interpreter_path }}"
    tags: always

  # 0 ─ Ensure /etc/zabbix exists & write config
  - name: Ensure /etc/zabbix exists
    file:
      path: /etc/zabbix
      state: directory
      owner: www-data
      group: www-data
      mode: "0755"
    tags: config

  - name: Create / update front-end config
    copy:
      dest:   "{{ zbx_etc_conf }}"
      owner:  www-data
      group:  www-data
      mode:   "0640"
      content: |
        <?php
        // Zabbix GUI configuration - Generated by Ansible
        $DB['TYPE']     = 'MYSQL';
        $DB['SERVER']   = '{{ zbx_db_host }}';
        $DB['PORT']     = '3306';
        $DB['DATABASE'] = '{{ zbx_db_name }}';
        $DB['USER']     = '{{ zbx_db_user }}';
        $DB['PASSWORD'] = '{{ zbx_db_password }}';

        // Zabbix server connection
        $ZBX_SERVER      = 'localhost';
        $ZBX_SERVER_PORT = '10051';
        $ZBX_SERVER_NAME = 'Zabbix Server ({{ inventory_hostname }})';

        // Image format
        $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;

        // Session configuration for AWX compatibility
        $DB['DOUBLE_IEEE754'] = true;
        ?>
    register: copy_result
    notify: reload apache2
    tags: config

  # 0-bis ─ Symlink under /usr/share/zabbix/conf
  - name: Ensure {{ zbx_share_conf_dir }} exists
    file:
      path: "{{ zbx_share_conf_dir }}"
      state: directory
      owner: www-data
      group: www-data
      mode: "0755"
    tags: config

  - name: Link config into /usr/share/zabbix/conf
    file:
      src:  "{{ zbx_etc_conf }}"
      dest: "{{ zbx_share_conf }}"
      state: link
      force: yes
    register: link_result
    notify: reload apache2
    tags: config

  # Flush handlers – reload Apache **now**
  - name: Flush handlers (reload Apache if needed)
    meta: flush_handlers
    tags: config

  - name: Wait for Apache after reload
    wait_for:
      host: "{{ ansible_default_ipv4.address }}"
      port: 80
      timeout: 120
      delay: 2
    when: copy_result.changed or link_result.changed
    tags: config

  # 1 ─ Wait until API answers
  - name: Wait until Zabbix API is reachable
    wait_for:
      host: "{{ ansible_default_ipv4.address }}"
      port: 80
      timeout: 120
      delay: 5
    tags: api

  - name: Test API endpoint accessibility
    uri:
      url: "http://{{ ansible_default_ipv4.address }}/zabbix/"
      method: GET
      status_code: [200, 302]
      timeout: 30
    register: web_test
    retries: 3
    delay: 10
    tags: api

  - name: Display web interface test result
    debug:
      msg: "Zabbix web interface responded with status: {{ web_test.status }}"
    tags: api

  # 2 ─ Login with default Admin credentials
  - name: Log in as Admin with default password
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          username: "{{ zbx_admin_user }}"
          password: "{{ zbx_admin_pass }}"
        id: 1
      headers:
        Content-Type: application/json-rpc
        User-Agent: "Ansible-AWX/{{ ansible_version.full | default('unknown') }}"
      status_code: 200
      timeout: 30
    register: admin_login
    retries: 3
    delay: 5
    tags: api

  - name: Debug admin login response
    debug:
      var: admin_login.json
      verbosity: 1
    tags: api

  - name: Check for API error in admin login
    fail:
      msg: "Admin login failed - API Error: {{ admin_login.json.error | to_nice_json }}"
    when: admin_login.json.error is defined
    tags: api

  - name: Set admin token
    set_fact:
      admin_token: "{{ admin_login.json.result }}"
    when:
      - admin_login.json is defined
      - admin_login.json.result is defined
    tags: api

  - name: Fail if admin token not obtained
    fail:
      msg: "Failed to get admin token. API response: {{ admin_login.json | to_nice_json }}"
    when: admin_login.json.result is not defined
    tags: api

  #################################################################
  # 3 ─ Clean up and ensure “ansible” API user exists (duplicate-safe)
  #################################################################
  - name: Look up ALL existing ansible users
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.get
        params:
          filter:
            username: "{{ zbx_api_user }}"      # <─ NEW field
          output: ["userid","username","name","type",
                   "attempt_failed","attempt_clock"]
        auth: "{{ admin_token }}"
        id: 2
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    register: api_user_lookup
    tags: user

  - name: Debug existing user lookup (detailed)
    debug:
      msg:
        - "Found {{ api_user_lookup.json.result | length }} user(s) with username '{{ zbx_api_user }}'"
        - "User details: {{ api_user_lookup.json.result }}"
    tags: user

  # Delete ALL existing ansible users to clean up duplicates
  - name: Delete existing ansible users (cleanup duplicates)
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.delete
        params: "{{ api_user_lookup.json.result | map(attribute='userid') | list }}"
        auth: "{{ admin_token }}"
        id: 2.1
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    when: api_user_lookup.json.result | length > 0
    register: user_delete_result
    tags: user

  - name: Wait after user deletion
    pause:
      seconds: 5
    when: user_delete_result.changed
    tags: user

  # Always create a fresh ansible user
  - name: Create fresh ansible super-admin user
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.create
        params:
          username: "{{ zbx_api_user }}"        # <─ NEW field
          name:     "Ansible Automation (AWX)"
          passwd: "{{ zbx_api_password }}"    # <─ NEW field
          type:     3                           # super-admin
          usrgrps:
            - usrgrpid: "7"                     # Zabbix administrators
        auth: "{{ admin_token }}"
        id: 3
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    register: user_create_result
    tags: user

  - name: Debug user creation result
    debug:
      var: user_create_result.json
    when: user_create_result is defined
    tags: user

  - name: Check for user creation errors
    fail:
      msg: "Failed to create ansible user - API Error: {{ user_create_result.json.error | to_nice_json }}"
    when:
      - user_create_result.json is defined
      - user_create_result.json.error is defined
    tags: user

  # Wait longer for user propagation
  - name: Wait for user changes to propagate
    pause:
      seconds: 10
    tags: user

  #################################################################
  # 4 ─ Login as ansible
  #################################################################
  - name: Verify new user can login (extended retries)
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          username: "{{ zbx_api_user }}"
          password: "{{ zbx_api_password }}"
        id: 4
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    register: api_login
    retries: 10
    delay: 5
    until: api_login.json.result is defined and api_login.json.error is not defined
    tags: user

  - name: Debug ansible user login response
    debug:
      var: api_login.json
      verbosity: 1
    tags: user

  - name: Check for API error in ansible login
    fail:
      msg: "Ansible user login failed - API Error: {{ api_login.json.error | to_nice_json }}"
    when: api_login.json.error is defined
    tags: user

  - name: Set API token for ansible user
    set_fact:
      api_token: "{{ api_login.json.result }}"
    when:
      - api_login.json is defined
      - api_login.json.result is defined
    tags: user

  - name: Fail if ansible API token not obtained
    fail:
      msg: "Failed to get ansible API token. Login response: {{ api_login.json | to_nice_json }}"
    when: api_login.json.result is not defined
    tags: user

  #################################################################
  # 5 ─ Create infrastructure objects
  #################################################################
  - name: Ensure Linux host group exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  hostgroup.create
        params:
          name: Linux
        auth: "{{ api_token }}"
        id: 5
      headers:
        Content-Type: application/json-rpc
      status_code: [200, 412]     # 412 = already exists
      timeout: 30
    register: hostgroup_create
    tags: infrastructure

  - name: Get required IDs (group and template) using batch request
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: batch
        params:
          - method: hostgroup.get
            params:
              filter:
                name: ["Linux"]
              output: ["groupid", "name"]
          - method: template.get
            params:
              filter:
                name: ["Linux by Zabbix agent active"]
              output: ["templateid", "name"]
        auth: "{{ api_token }}"
        id: 6
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    register: batch_ids
    tags: infrastructure

  - name: Debug batch request results
    debug:
      var: batch_ids.json
      verbosity: 1
    tags: infrastructure

  - name: Set group and template IDs
    set_fact:
      linux_groupid: "{{ batch_ids.json[0].result[0].groupid }}"
      linux_tmplid:  "{{ batch_ids.json[1].result[0].templateid }}"
    when:
      - batch_ids.json is defined
      - batch_ids.json[0].result is defined
      - batch_ids.json[0].result | length > 0
      - batch_ids.json[1].result is defined
      - batch_ids.json[1].result | length > 0
    tags: infrastructure

  - name: Fail if required template not found
    fail:
      msg: "Required template 'Linux by Zabbix agent active' not found. Available templates need to be checked."
    when:
      - batch_ids.json[1].result is defined
      - batch_ids.json[1].result | length == 0
    tags: infrastructure

  #################################################################
  # 6 ─ Register the current host
  #################################################################
  - name: Check if host already exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.get
        params:
          filter:
            host: ["{{ inventory_hostname }}"]
          output: ["hostid", "host", "name"]
        auth: "{{ api_token }}"
        id: 7
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    register: existing_host
    when:
      - linux_groupid is defined
      - linux_tmplid is defined
    tags: host

  - name: Register this server as new host
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.create
        params:
          host: "{{ inventory_hostname }}"
          name: "{{ inventory_hostname }} (AWX Managed)"
          interfaces:
            - type: 1           # Zabbix agent
              main: 1           # primary interface
              useip: 1          # use IP address
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:
            - groupid: "{{ linux_groupid }}"
          templates:
            - templateid: "{{ linux_tmplid }}"
          description: "Host registered by AWX/Ansible automation on {{ ansible_date_time.iso8601 }}"
        auth: "{{ api_token }}"
        id: 8
      headers:
        Content-Type: application/json-rpc
      status_code: [200, 412]   # 412 = already exists
      timeout: 30
    when:
      - linux_groupid is defined
      - linux_tmplid is defined
      - existing_host.json.result | length == 0
    register: host_create
    tags: host

  - name: Update existing host if found
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.update
        params:
          hostid: "{{ existing_host.json.result[0].hostid }}"
          name: "{{ inventory_hostname }} (AWX Managed)"
          interfaces:
            - type: 1
              main: 1
              useip: 1
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:
            - groupid: "{{ linux_groupid }}"
          templates:
            - templateid: "{{ linux_tmplid }}"
          description: "Host updated by AWX/Ansible automation on {{ ansible_date_time.iso8601 }}"
        auth: "{{ api_token }}"
        id: 9
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    when:
      - linux_groupid is defined
      - linux_tmplid is defined
      - existing_host.json.result | length > 0
    register: host_update
    tags: host

  #################################################################
  # 7 ─ Final verification and summary
  #################################################################
  - name: Verify host registration
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.get
        params:
          filter:
            host: ["{{ inventory_hostname }}"]
          output: ["hostid","host","name","status"]
          selectGroups: ["name"]
          selectParentTemplates: ["name"]
        auth: "{{ api_token }}"
        id: 10
      headers:
        Content-Type: application/json-rpc
      status_code: 200
      timeout: 30
    register: final_host_check
    tags: verify

  - name: Display final host status
    debug:
      msg:
        - "Host ID: {{ final_host_check.json.result[0].hostid | default('Not found') }}"
        - "Host Name: {{ final_host_check.json.result[0].name | default('Not found') }}"
        - "Status: {{ 'Enabled' if final_host_check.json.result[0].status == '0' else 'Disabled' }}"
        - "Groups: {{ final_host_check.json.result[0].groups | map(attribute='name') | list | join(', ') }}"
        - "Templates: {{ final_host_check.json.result[0].parentTemplates | map(attribute='name') | list | join(', ') }}"
    when: final_host_check.json.result | length > 0
    tags: verify

  #################################################################
  # 8 ─ Bootstrap completion summary
  #################################################################
  - name: Bootstrap completion summary
    debug:
      msg:
        - "=== Zabbix Bootstrap Complete ==="
        - "✓ Configuration files created and linked"
        - "✓ Admin user accessible with default credentials"
        - "✓ API user '{{ zbx_api_user }}' created/updated (duplicates cleaned)"
        - "✓ Linux host group ensured"
        - "✓ Host '{{ inventory_hostname }}' registered with monitoring"
        - ""
        - "Access Details:"
        - "  Web UI: http://{{ ansible_default_ipv4.address }}/zabbix/"
        - "  Admin Login: {{ zbx_admin_user }} / {{ zbx_admin_pass }}"
        - "  API User: {{ zbx_api_user }} / {{ zbx_api_password }}"
        - "  API URL: {{ zbx_api_url }}"
        - ""
        - "Next Steps:"
        - "  1. Change default Admin password via web interface"
        - "  2. Configure additional monitoring templates as needed"
        - "  3. Set up notification channels (email, Slack, etc.)"
        - "  4. Install and configure Zabbix agent on monitored hosts"
    tags: always

#################################################################
# HANDLERS
#################################################################
  handlers:
    - name: reload apache2
      service:
        name: apache2
        state: reloaded
      tags: config
