---
# bootstrap_zabbix_api.yml
# ------------------------------------------------------------
# • Ensures front-end config exists and is readable
# • Adds / refreshes a symlink in /usr/share/zabbix/conf/
# • Flushes handlers so Apache fully reloads before API calls
# • Changes Admin password, creates “ansible” API user
# • Creates host-group Linux and registers this host
# • Idempotent – safe to re-run

- name: Bootstrap Zabbix GUI via API
  hosts: all
  become: true
  gather_facts: true

  #################################################################
  # Variables (inherited from the installer playbook)
  #################################################################
  vars:
    zbx_db_host:        localhost
    zbx_db_name:        "{{ zabbix_db_name      | default('zabbix') }}"
    zbx_db_user:        "{{ zabbix_db_user      | default('zabbix') }}"
    zbx_db_password:    "{{ zabbix_db_password  | default('StrongDBpass!') }}"

    zbx_api_url:        "http://{{ ansible_default_ipv4.address }}/zabbix/api_jsonrpc.php"

    zbx_admin_user:     Admin
    zbx_admin_pass:     "{{ zabbix_admin_password | default('zabbix') }}"
    zbx_admin_new_pass: admin@123

    zbx_api_user:       ansible
    zbx_api_password:   admin@123

    zbx_web_conf_dir:   /etc/zabbix/web
    zbx_web_conf:       "{{ zbx_web_conf_dir }}/zabbix.conf.php"
    zbx_share_conf_dir: /usr/share/zabbix/conf
    zbx_share_conf:     "{{ zbx_share_conf_dir }}/zabbix.conf.php"

  #################################################################
  # TASKS
  #################################################################
  tasks:
    # 0 ─ Ensure main config file exists and is readable
    - name: Ensure {{ zbx_web_conf_dir }} exists
      file:
        path: "{{ zbx_web_conf_dir }}"
        state: directory
        owner: www-data
        group: www-data
        mode: "0755"

    - name: Create / update front-end config
      copy:
        dest:   "{{ zbx_web_conf }}"
        owner:  www-data
        group:  www-data
        mode:   "0640"
        content: |
          <?php
          $DB['TYPE']     = 'MYSQL';
          $DB['SERVER']   = '{{ zbx_db_host }}';
          $DB['PORT']     = '3306';
          $DB['DATABASE'] = '{{ zbx_db_name }}';
          $DB['USER']     = '{{ zbx_db_user }}';
          $DB['PASSWORD'] = '{{ zbx_db_password }}';
          $ZBX_SERVER      = 'localhost';
          $ZBX_SERVER_PORT = '10051';
          $ZBX_SERVER_NAME = 'Zabbix';
          $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
          ?>
      register: copy_result
      notify: reload apache2

    # 0-bis ─ Put (or refresh) symlink under /usr/share/zabbix/conf
    - name: Ensure {{ zbx_share_conf_dir }} exists
      file:
        path: "{{ zbx_share_conf_dir }}"
        state: directory
        owner: www-data
        group: www-data
        mode: "0755"

    - name: Link config into /usr/share/zabbix/conf
      file:
        src:  "{{ zbx_web_conf }}"
        dest: "{{ zbx_share_conf }}"
        state: link
        force: yes
      register: link_result
      notify: reload apache2

    # flush handlers now → Apache fully reloaded before API calls
    - meta: flush_handlers

    - name: Wait for Apache after a reload
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 80
        timeout: 120
      when: copy_result.changed or link_result.changed

    # 1 ─ Wait until API answers
    - name: Wait until Zabbix API is reachable
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 80
        timeout: 120

    # 2 ─ Login with factory Admin credentials
    - name: Log in as Admin / default password
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method: user.login
          params:
            user:     "{{ zbx_admin_user }}"
            password: "{{ zbx_admin_pass }}"
          id: 1
        headers:
          Content-Type: application/json
        status_code: 200
      register: login_default

    - name: Abort if login failed
      fail:
        msg: >
          Login with Admin / '{{ zbx_admin_pass }}' failed.
          API error: {{ login_default.json.error | to_nice_json }}
      when: login_default.json.result is not defined

    - set_fact:
        admin_token_old: "{{ login_default.json.result }}"

    # 3 ─ Change Admin password
    - name: Set new Admin password
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.update
          params:
            userid: "1"
            passwd: "{{ zbx_admin_new_pass }}"
          auth: "{{ admin_token_old }}"
          id: 2
        headers:
          Content-Type: application/json
        status_code: 200

    - name: Log in with new Admin password
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.login
          params:
            user:     "{{ zbx_admin_user }}"
            password: "{{ zbx_admin_new_pass }}"
          id: 3
        headers:
          Content-Type: application/json
        status_code: 200
      register: admin_login

    - set_fact:
        admin_token: "{{ admin_login.json.result }}"

    # 4 ─ Ensure “ansible” API user exists
    - name: Look up ansible user
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.get
          params:
            filter:
              alias: "{{ zbx_api_user }}"
          auth: "{{ admin_token }}"
          id: 4
        headers:
          Content-Type: application/json
        status_code: 200
      register: api_user_lookup

    - name: Create ansible super-admin user
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.create
          params:
            alias:  "{{ zbx_api_user }}"
            name:   Ansible Automation
            passwd: "{{ zbx_api_password }}"
            type:   3                      # super-admin
            usrgrps:
              - usrgrpid: "7"             # Zabbix administrators
          auth: "{{ admin_token }}"
          id: 5
        headers:
          Content-Type: application/json
        status_code: 200
      when: api_user_lookup.json.result | length == 0

    # 5 ─ Login as ansible; create group & host
    - name: Login as ansible
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  user.login
          params:
            user:     "{{ zbx_api_user }}"
            password: "{{ zbx_api_password }}"
          id: 6
        headers:
          Content-Type: application/json
        status_code: 200
      register: api_login

    - set_fact:
        api_token: "{{ api_login.json.result }}"

    - name: Ensure host-group “Linux”
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method:  hostgroup.create
          params:
            name: Linux
          auth: "{{ api_token }}"
          id: 7
        headers:
          Content-Type: application/json
        status_code: [200, 412]   # 412 = already exists

    - name: Get IDs for Linux group and template
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method: batch
          params:
            - method: hostgroup.get
              params:
                filter:
                  name: ["Linux"]
            - method: template.get
              params:
                filter:
                  name: ["Linux by Zabbix agent active"]
          auth: "{{ api_token }}"
        headers:
          Content-Type: application/json
        status_code: 200
      register: ids

    - set_fact:
        linux_groupid: "{{ ids.json[0].result[0].groupid }}"
        linux_tmplid:  "{{ ids.json[1].result[0].templateid }}"

    - name: Register this server as host
      uri:
        url: "{{ zbx_api_url }}"
        method: POST
        body_format: json
        body:
          jsonrpc: "2.0"
          method: host.create
          params:
            host: "{{ inventory_hostname }}"
            name: "{{ inventory_hostname }}"
            interfaces:
              - type: 1
                main: 1
                useip: 1
                ip: "{{ ansible_default_ipv4.address }}"
                dns: ""
                port: "10050"
            groups:
              - groupid: "{{ linux_groupid }}"
            templates:
              - templateid: "{{ linux_tmplid }}"
          auth: "{{ api_token }}"
          id: 8
        headers:
          Content-Type: application/json
        status_code: [200, 412]

    # 6 ─ Summary
    - name: Bootstrap summary
      debug:
        msg: >
          Zabbix GUI initialized; Admin password updated,
          API user “{{ zbx_api_user }}” ready,
          host-group Linux and host {{ inventory_hostname }} present.

#################################################################
# HANDLERS
#################################################################
  handlers:
    - name: reload apache2
      service:
        name: apache2
        state: reloaded
