---
# bootstrap_zabbix_api.yml  (FIXED)
#
# ▸ Idempotent Zabbix GUI bootstrap
#   – writes /etc/zabbix/zabbix.conf.php (+ symlink)
#   – reloads Apache if anything changed
#   – ensures “ansible” API user (super-admin, known password)
#   – ensures host-group Linux & registers this host

- name: Bootstrap Zabbix GUI via API
  hosts: all
  become: true
  gather_facts: true

  #################################################################
  # ▸ Vars (fall back to sane defaults if the installer vars
  #         weren't imported into this run)                       #
  #################################################################
  vars:
    # ── DB access for web UI ─────────────────────────────────────
    zbx_db_host:     localhost
    zbx_db_name:     "{{ zabbix_db_name     | default('zabbix') }}"
    zbx_db_user:     "{{ zabbix_db_user     | default('zabbix') }}"
    zbx_db_password: "{{ zabbix_db_password | default('StrongDBpass!') }}"

    # ── Zabbix API endpoints / creds ─────────────────────────────
    zbx_api_url:     "http://{{ ansible_default_ipv4.address }}/zabbix/api_jsonrpc.php"
    zbx_admin_user:  Admin
    zbx_admin_pass:  "{{ zabbix_admin_password | default('zabbix') }}"

    # service account we want to guarantee
    zbx_api_user:     ansible
    zbx_api_password: admin@123          # <- we enforce/update this

    # ── front-end config paths ───────────────────────────────────
    zbx_etc_conf:       /etc/zabbix/zabbix.conf.php
    zbx_share_conf_dir: /usr/share/zabbix/conf
    zbx_share_conf:     "{{ zbx_share_conf_dir }}/zabbix.conf.php"

  #################################################################
  # TASKS
  #################################################################
  tasks:

  # ───────────────────────────────────────────────────────────────
  # 0. Ensure the PHP front-end config exists (idempotent)
  # ───────────────────────────────────────────────────────────────
  - name: Write /etc/zabbix/zabbix.conf.php
    copy:
      dest:   "{{ zbx_etc_conf }}"
      owner:  www-data
      group:  www-data
      mode:   '0640'
      content: |
        <?php
        $DB['TYPE']     = 'MYSQL';
        $DB['SERVER']   = '{{ zbx_db_host }}';
        $DB['PORT']     = '3306';
        $DB['DATABASE'] = '{{ zbx_db_name }}';
        $DB['USER']     = '{{ zbx_db_user }}';
        $DB['PASSWORD'] = '{{ zbx_db_password }}';
        $ZBX_SERVER      = 'localhost';
        $ZBX_SERVER_PORT = '10051';
        $ZBX_SERVER_NAME = 'Zabbix';
        $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
        ?>
    notify: reload apache2
    register: cfg_main

  - name: Symlink config into /usr/share/zabbix/conf
    file:
      src:  "{{ zbx_etc_conf }}"
      dest: "{{ zbx_share_conf }}"
      state: link
      force: yes
      owner: www-data
      group: www-data
    notify: reload apache2
    register: cfg_link

  # immediately reload apache if either task changed something
  - meta: flush_handlers

  - name: Wait for Apache after reload (only if it reloaded)
    wait_for:
      host: "{{ ansible_default_ipv4.address }}"
      port: 80
      timeout: 120
    when: cfg_main.changed or cfg_link.changed

  # ───────────────────────────────────────────────────────────────
  # 1. Login with factory Admin credentials
  # ───────────────────────────────────────────────────────────────
  - name: Login as Admin with default password
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          user:     "{{ zbx_admin_user }}"
          password: "{{ zbx_admin_pass }}"
        id: 1
      headers:
        Content-Type: application/json
      status_code: 200
    register: admin_login

  - name: Abort if Admin login failed
    fail:
      msg: "Admin login failed => {{ admin_login.json | to_json(indent=2) }}"
    when: admin_login.json.result is not defined

  - set_fact:
      admin_token: "{{ admin_login.json.result }}"

  # ───────────────────────────────────────────────────────────────
  # 2. Ensure the dedicated “ansible” API user exists & password is correct
  # ───────────────────────────────────────────────────────────────
  - name: Look up existing “ansible” account
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.get
        params:
          filter: { alias: "{{ zbx_api_user }}" }
        auth: "{{ admin_token }}"
        id: 2
      headers: { Content-Type: application/json }
      status_code: 200
    register: ansible_lookup

  - name: Create or update the “ansible” user (super-admin)
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body: |
        {
          "jsonrpc": "2.0",
          "id": 3,
          {% if ansible_lookup.json.result | length == 0 %}
          "method": "user.create",
          "params": {
            "alias": "{{ zbx_api_user }}",
            "name":  "Ansible Automation",
            "passwd":"{{ zbx_api_password }}",
            "type":  3,
            "usrgrps":[ { "usrgrpid":"7" } ]
          },
          "auth": "{{ admin_token }}"
          {% else %}
          "method": "user.update",
          "params": {
            "userid": "{{ ansible_lookup.json.result[0].userid }}",
            "passwd": "{{ zbx_api_password }}",
            "type":   3
          },
          "auth": "{{ admin_token }}"
          {% endif %}
        }
      headers: { Content-Type: application/json }
      status_code: 200

  # ───────────────────────────────────────────────────────────────
  # 3. Login as “ansible” (now guaranteed to succeed)
  # ───────────────────────────────────────────────────────────────
  - name: Login as ansible
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          user:     "{{ zbx_api_user }}"
          password: "{{ zbx_api_password }}"
        id: 4
      headers:
        Content-Type: application/json
      status_code: 200
    register: ansible_login

  - name: Abort if ansible login failed
    fail:
      msg: "ansible login failed => {{ ansible_login.json | to_json(indent=2) }}"
    when: ansible_login.json.result is not defined

  - set_fact:
      api_token: "{{ ansible_login.json.result }}"

  # ───────────────────────────────────────────────────────────────
  # 4. Host-group Linux + register this host
  # ───────────────────────────────────────────────────────────────
  - name: Ensure host-group “Linux”
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  hostgroup.create
        params:
          name: Linux
        auth: "{{ api_token }}"
        id: 5
      headers: { Content-Type: application/json }
      status_code: [200,412]          # 412 = already exists

  - name: Fetch IDs for Linux group & template
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  batch
        params:
          - method: hostgroup.get
            params: { filter: { name: ["Linux"] } }
          - method: template.get
            params: { filter: { name: ["Linux by Zabbix agent active"] } }
        auth: "{{ api_token }}"
        id: 6
      headers: { Content-Type: application/json }
      status_code: 200
    register: ids

  - set_fact:
      linux_groupid: "{{ ids.json[0].result[0].groupid }}"
      linux_tmplid:  "{{ ids.json[1].result[0].templateid }}"

  - name: Register this server as a host
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  host.create
        params:
          host: "{{ inventory_hostname }}"
          name: "{{ inventory_hostname }}"
          interfaces:
            - type: 1
              main: 1
              useip: 1
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:    [ { groupid: "{{ linux_groupid }}" } ]
          templates: [ { templateid: "{{ linux_tmplid }}" } ]
        auth: "{{ api_token }}"
        id: 7
      headers: { Content-Type: application/json }
      status_code: [200,412]      # 412 = host already exists

  # ───────────────────────────────────────────────────────────────
  # 5. Summary
  # ───────────────────────────────────────────────────────────────
  - name: Bootstrap summary
    debug:
      msg: |
        ✅ Zabbix front-end configured
        ✅ API user “{{ zbx_api_user }}” ready
        ✅ Host-group Linux + host {{ inventory_hostname }} ensured

#################################################################
# HANDLERS
#################################################################
  handlers:
    - name: reload apache2
      service:
        name: apache2
        state: reloaded
