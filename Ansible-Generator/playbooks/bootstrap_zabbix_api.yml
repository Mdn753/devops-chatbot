---
- name: Bootstrap Zabbix GUI via API
  hosts: all                    # ← run against the Zabbix server VM
  gather_facts: true            # we need ansible_default_ipv4.address
  become: false

  vars:
    # ── connection --------------------------------------------------
    zbx_api_url: "http://{{ ansible_default_ipv4.address }}/zabbix/api_jsonrpc.php"

    # ── factory credentials (adjust if you already changed them)
    zbx_admin_user:      "Admin"
    zbx_admin_pass:      "zabbix"

    # ── new secure Admin password
    zbx_admin_new_pass:  "admin@123"

    # ── permanent API service account
    zbx_api_user:        "ansible"
    zbx_api_password:    "admin@123"

  tasks:
  # ────────────────────────────────────────────────────────────────
  # 0 • wait until the API endpoint is reachable
  # ────────────────────────────────────────────────────────────────
  - name: Wait until Zabbix API responds (HTTP 80)
    wait_for:
      host: "{{ ansible_default_ipv4.address }}"
      port: 80
      timeout: 120

  # ────────────────────────────────────────────────────────────────
  # 1 • log in with factory Admin credentials
  # ────────────────────────────────────────────────────────────────
  - name: Log in as factory Admin / zabbix
    uri:
      url:          "{{ zbx_api_url }}"
      method:       POST
      body_format:  json
      body:
        jsonrpc: "2.0"
        method:  "user.login"
        params:
          user:     "{{ zbx_admin_user }}"
          password: "{{ zbx_admin_pass }}"
        id: 1
      headers:      { Content-Type: "application/json" }
      status_code:  200
    register: login_default

  - name: Stop if login failed (Admin password not “zabbix”?)
    fail:
      msg: >
        Login with user='{{ zbx_admin_user }}' failed.
        Zabbix replied: {{ login_default.json.error | to_nice_json }}
    when: login_default.json.result is not defined

  - name: Set default-login token
    set_fact:
      old_admin_token: "{{ login_default.json.result }}"

  # ────────────────────────────────────────────────────────────────
  # 2 • change Admin password (idempotent)
  # ────────────────────────────────────────────────────────────────
  - name: Change Admin password to the desired value
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "user.update"
        params:
          userid: "1"
          passwd: "{{ zbx_admin_new_pass }}"
        auth:  "{{ old_admin_token }}"
        id: 2
      headers: { Content-Type: "application/json" }
      status_code: 200
    register: pwd_change

  # ────────────────────────────────────────────────────────────────
  # 3 • log in again with the *new* Admin password
  # ────────────────────────────────────────────────────────────────
  - name: Log in with the new Admin password
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "user.login"
        params:
          user:     "{{ zbx_admin_user }}"
          password: "{{ zbx_admin_new_pass }}"
        id: 3
      headers: { Content-Type: "application/json" }
      status_code: 200
    register: login_new

  - name: Set new Admin token
    set_fact:
      admin_token: "{{ login_new.json.result }}"

  # ────────────────────────────────────────────────────────────────
  # 4 • create / ensure the “ansible” API user exists
  # ────────────────────────────────────────────────────────────────
  - name: Check if “ansible” user already exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "user.get"
        params:
          filter: { alias: "{{ zbx_api_user }}" }
        auth: "{{ admin_token }}"
        id: 4
      headers: { Content-Type: "application/json" }
      status_code: 200
    register: api_user_check

  - name: Create “ansible” API user (super-admin)
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "user.create"
        params:
          alias:  "{{ zbx_api_user }}"
          name:   "Ansible Automation"
          passwd: "{{ zbx_api_password }}"
          type:   3                          # 3 = Zabbix Super Admin
          usrgrps:
            - usrgrpid: "7"                  # “Zabbix administrators”
        auth: "{{ admin_token }}"
        id: 5
      headers: { Content-Type: "application/json" }
      status_code: 200
    when: api_user_check.json.result | length == 0

  # ────────────────────────────────────────────────────────────────
  # 5 • log in as “ansible” to drive further automation
  # ────────────────────────────────────────────────────────────────
  - name: Login as ansible API user
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "user.login"
        params:
          user:     "{{ zbx_api_user }}"
          password: "{{ zbx_api_password }}"
        id: 6
      headers: { Content-Type: "application/json" }
      status_code: 200
    register: api_login

  - name: Set ansible API token
    set_fact:
      api_token: "{{ api_login.json.result }}"

  # ────────────────────────────────────────────────────────────────
  # 6 • ensure host-group “Linux” exists
  # ────────────────────────────────────────────────────────────────
  - name: Ensure host group “Linux”
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "hostgroup.create"
        params:  { name: "Linux" }
        auth:    "{{ api_token }}"
        id: 7
      headers: { Content-Type: "application/json" }
      status_code: [200, 412]     # 412 means “already exists”

  # fetch its ID
  - name: Get group ID for Linux
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "hostgroup.get"
        params:  { filter: { name: ["Linux"] } }
        auth:    "{{ api_token }}"
        id: 8
      headers: { Content-Type: "application/json" }
      status_code: 200
    register: linux_group

  # ────────────────────────────────────────────────────────────────
  # 7 • obtain template ID (Linux by agent active)
  # ────────────────────────────────────────────────────────────────
  - name: Get template ID
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "template.get"
        params:  { filter: { name: ["Linux by Zabbix agent active"] } }
        auth:    "{{ api_token }}"
        id: 9
      headers: { Content-Type: "application/json" }
      status_code: 200
    register: linux_template

  # ────────────────────────────────────────────────────────────────
  # 8 • register the server itself as a host (idempotent)
  # ────────────────────────────────────────────────────────────────
  - name: Check if host exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "host.get"
        params:  { filter: { host: ["{{ inventory_hostname }}"] } }
        auth:    "{{ api_token }}"
        id: 10
      headers: { Content-Type: "application/json" }
      status_code: 200
    register: host_check

  - name: Create host for this server (if absent)
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  "host.create"
        params:
          host: "{{ inventory_hostname }}"
          name: "{{ inventory_hostname }}"
          interfaces:
            - type: 1
              main: 1
              useip: 1
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:
            - groupid: "{{ linux_group.json.result[0].groupid }}"
          templates:
            - templateid: "{{ linux_template.json.result[0].templateid }}"
        auth: "{{ api_token }}"
        id: 11
      headers: { Content-Type: "application/json" }
      status_code: 200
    when: host_check.json.result | length == 0

  # ────────────────────────────────────────────────────────────────
  # 9 • summary
  # ────────────────────────────────────────────────────────────────
  - name: Summary
    debug:
      msg:
        - "Admin password now set to requested value"
        - "Service account “{{ zbx_api_user }}” available"
        - "Host group “Linux” exists"
        - "Host “{{ inventory_hostname }}” monitored"
