---
# bootstrap_zabbix_api.yml — AWX-compatible (Zabbix ≥ 6.0)
# --------------------------------------------------------
# • Configures the Zabbix GUI
# • Creates/updates an “ansible” API super-admin user
# • Registers this host in the “Linux” host-group

- name: Bootstrap Zabbix GUI via API
  hosts: all
  become: true
  gather_facts: true

  #################################################################
  # Variables
  #################################################################
  vars:
    # DB creds (override via inventory / vault if needed)
    zbx_db_host:        localhost
    zbx_db_name:        "{{ zabbix_db_name      | default('zabbix') }}"
    zbx_db_user:        "{{ zabbix_db_user      | default('zabbix') }}"
    zbx_db_password:    "{{ zabbix_db_password  | default('StrongDBpass!') }}"

    # API endpoints / users
    zbx_api_url:        "http://{{ ansible_default_ipv4.address }}/zabbix/api_jsonrpc.php"

    zbx_admin_user:     Admin
    zbx_admin_pass:     "{{ zabbix_admin_password | default('zabbix') }}"

    zbx_api_user:       ansible
    zbx_api_password:   "{{ zabbix_api_password  | default('admin@123') }}"

    # Auto-password settings (only used if above is weak)
    zbx_api_password_length: 24
    zbx_api_password_denylist: [admin@123, admin, password, zabbix, changeme]

    # Front-end config files
    zbx_etc_conf:       /etc/zabbix/zabbix.conf.php
    zbx_share_conf_dir: /usr/share/zabbix/conf
    zbx_share_conf:     "{{ zbx_share_conf_dir }}/zabbix.conf.php"

    python_interpreter_path: "/usr/bin/python3"

  #################################################################
  # TASKS
  #################################################################
  tasks:

  # ---------------------------------------------------------------
  # 0.  Print environment info
  # ---------------------------------------------------------------
  - debug:
      msg:
        - "Running on : {{ inventory_hostname }}"
        - "Target IP  : {{ ansible_default_ipv4.address }}"
        - "API URL    : {{ zbx_api_url }}"
        - "Interpreter: {{ python_interpreter_path }}"
    tags: always

  # ---------------------------------------------------------------
  # 0.1 Generate strong password if the supplied one is weak
  # ---------------------------------------------------------------
  - name: Generate random strong password when supplied one is weak
    when: >
      (zbx_api_password | length < 12) or
      (zbx_api_password | lower in zbx_api_password_denylist)
    set_fact:
      zbx_api_password_effective: >-
        {{ lookup('community.general.random_password',
                  'length={{ zbx_api_password_length }} special=true') }}
    no_log: true

  - name: Use provided password when it is strong enough
    when: zbx_api_password_effective is not defined
    set_fact:
      zbx_api_password_effective: "{{ zbx_api_password }}"
    no_log: true

  # ---------------------------------------------------------------
  # 1.  Ensure GUI config files
  # ---------------------------------------------------------------
  - name: Ensure /etc/zabbix exists
    file:
      path: /etc/zabbix
      state: directory
      owner: www-data
      group: www-data
      mode: "0755"
    tags: config

  - name: Write zabbix.conf.php
    copy:
      dest:   "{{ zbx_etc_conf }}"
      owner:  www-data
      group:  www-data
      mode:   "0640"
      content: |
        <?php
        $DB['TYPE']     = 'MYSQL';
        $DB['SERVER']   = '{{ zbx_db_host }}';
        $DB['PORT']     = '3306';
        $DB['DATABASE'] = '{{ zbx_db_name }}';
        $DB['USER']     = '{{ zbx_db_user }}';
        $DB['PASSWORD'] = '{{ zbx_db_password }}';
        $ZBX_SERVER      = 'localhost';
        $ZBX_SERVER_PORT = '10051';
        $ZBX_SERVER_NAME = 'Zabbix Server ({{ inventory_hostname }})';
        $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
        $DB['DOUBLE_IEEE754'] = true;
        ?>
    register: copy_result
    notify: reload apache2
    tags: config

  - name: Ensure share dir exists
    file:
      path: "{{ zbx_share_conf_dir }}"
      state: directory
      owner: www-data
      group: www-data
      mode: "0755"
    tags: config

  - name: Symlink config into share dir
    file:
      src:  "{{ zbx_etc_conf }}"
      dest: "{{ zbx_share_conf }}"
      state: link
      force: yes
    register: link_result
    notify: reload apache2
    tags: config

  - meta: flush_handlers
    tags: config

  - wait_for:
      host: "{{ ansible_default_ipv4.address }}"
      port: 80
      timeout: 120
      delay: 2
    when: copy_result.changed or link_result.changed
    tags: config

  # ---------------------------------------------------------------
  # 2.  Log in as default Admin
  # ---------------------------------------------------------------
  - name: Admin login
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          username: "{{ zbx_admin_user }}"
          password: "{{ zbx_admin_pass }}"
        id: 1
      headers: { Content-Type: application/json-rpc }
    register: admin_login
    retries: 3
    delay: 5
    tags: api

  - fail:
      msg: "Admin login failed – {{ admin_login.json.error | to_nice_json }}"
    when: admin_login.json.error is defined
    tags: api

  - set_fact:
      admin_token: "{{ admin_login.json.result }}"
    tags: api

  # ---------------------------------------------------------------
  # 2.5 Get roleid of “Super admin role”
  # ---------------------------------------------------------------
  - name: Lookup Super-admin role
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  role.get
        params:
          filter: { name: ["Super admin role"] }
          output: ["roleid"]
        auth: "{{ admin_token }}"
        id: 2.5
      headers: { Content-Type: application/json-rpc }
    register: super_role
    tags: roles

  - set_fact:
      superadmin_roleid: "{{ super_role.json.result[0].roleid | default('3') }}"
    tags: roles

  # ---------------------------------------------------------------
  # 3.  Ensure “ansible” API user
  # ---------------------------------------------------------------
  - name: Find existing ansible users
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.get
        params:
          filter: { username: "{{ zbx_api_user }}" }
          output: ["userid"]
        auth: "{{ admin_token }}"
        id: 3
      headers: { Content-Type: application/json-rpc }
    register: api_user_lookup
    tags: user

  - name: Delete duplicates
    when: api_user_lookup.json.result | length > 0
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.delete
        params: "{{ api_user_lookup.json.result | map(attribute='userid') | list }}"
        auth: "{{ admin_token }}"
        id: 3.1
      headers: { Content-Type: application/json-rpc }
    tags: user

  - pause: { seconds: 5 }
    when: api_user_lookup.json.result | length > 0
    tags: user

  - name: Create super-admin API user
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.create
        params:
          username: "{{ zbx_api_user }}"
          name:     "Ansible Automation (AWX)"
          passwd:   "{{ zbx_api_password_effective }}"
          roleid:   "{{ superadmin_roleid }}"
          usrgrps:
            - usrgrpid: "7"
        auth: "{{ admin_token }}"
        id: 3.2
      headers: { Content-Type: application/json-rpc }
    register: user_create_result
    no_log: true
    tags: user

  - fail:
      msg: "Failed to create ansible user – {{ user_create_result.json.error | to_nice_json }}"
    when: user_create_result.json.error is defined
    tags: user

  - pause: { seconds: 10 }
    tags: user

  # ---------------------------------------------------------------
  # 4.  Log in as ansible
  # ---------------------------------------------------------------
  - name: Login as ansible
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  user.login
        params:
          username: "{{ zbx_api_user }}"
          password: "{{ zbx_api_password_effective }}"
        id: 4
      headers: { Content-Type: application/json-rpc }
    register: api_login
    retries: 10
    delay: 5
    until: api_login.json.result is defined and api_login.json.error is not defined
    tags: user

  - set_fact:
      api_token: "{{ api_login.json.result }}"
    tags: user

  # ---------------------------------------------------------------
  # 5.  Ensure host-group & template IDs (NO batch)
  # ---------------------------------------------------------------
  - name: Ensure “Linux” host-group exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  hostgroup.create
        params: { name: Linux }
        auth: "{{ api_token }}"
        id: 5
      headers: { Content-Type: application/json-rpc }
      status_code: [200, 412]
    tags: infrastructure

  - name: Get Linux host-group ID
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  hostgroup.get
        params:
          filter: { name: ["Linux"] }
          output: ["groupid"]
        auth: "{{ api_token }}"
        id: 5.1
      headers: { Content-Type: application/json-rpc }
    register: linux_group
    tags: infrastructure

  - name: Get “Linux by Zabbix agent active” template ID
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  template.get
        params:
          filter: { name: ["Linux by Zabbix agent active"] }
          output: ["templateid"]
        auth: "{{ api_token }}"
        id: 5.2
      headers: { Content-Type: application/json-rpc }
    register: linux_template
    tags: infrastructure

  - fail:
      msg: "Host-group ‘Linux’ not found after creation attempt."
    when: linux_group.json.result | length == 0
    tags: infrastructure

  - fail:
      msg: "Template ‘Linux by Zabbix agent active’ not found – import it first."
    when: linux_template.json.result | length == 0
    tags: infrastructure

  - set_fact:
      linux_groupid: "{{ linux_group.json.result[0].groupid }}"
      linux_tmplid:  "{{ linux_template.json.result[0].templateid }}"
    tags: infrastructure

  # ---------------------------------------------------------------
  # 6.  Register or update this host
  # ---------------------------------------------------------------
  - name: Check if host already exists
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method:  host.get
        params:
          filter: { host: ["{{ inventory_hostname }}"] }
          output: ["hostid"]
        auth: "{{ api_token }}"
        id: 6
      headers: { Content-Type: application/json-rpc }
    register: existing_host
    tags: host

  - name: Create new host
    when: existing_host.json.result | length == 0
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.create
        params:
          host: "{{ inventory_hostname }}"
          name: "{{ inventory_hostname }} (AWX Managed)"
          interfaces:
            - type: 1
              main: 1
              useip: 1
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:   [{ groupid: "{{ linux_groupid }}" }]
          templates: [{ templateid: "{{ linux_tmplid }}" }]
          description: "Host registered by AWX on {{ ansible_date_time.iso8601 }}"
        auth: "{{ api_token }}"
        id: 6.1
      headers: { Content-Type: application/json-rpc }
    tags: host

  - name: Update existing host
    when: existing_host.json.result | length > 0
    uri:
      url: "{{ zbx_api_url }}"
      method: POST
      body_format: json
      body:
        jsonrpc: "2.0"
        method: host.update
        params:
          hostid: "{{ existing_host.json.result[0].hostid }}"
          name:   "{{ inventory_hostname }} (AWX Managed)"
          interfaces:
            - type: 1
              main: 1
              useip: 1
              ip: "{{ ansible_default_ipv4.address }}"
              dns: ""
              port: "10050"
          groups:   [{ groupid: "{{ linux_groupid }}" }]
          templates: [{ templateid: "{{ linux_tmplid }}" }]
          description: "Host updated by AWX on {{ ansible_date_time.iso8601 }}"
        auth: "{{ api_token }}"
        id: 6.2
      headers: { Content-Type: application/json-rpc }
    tags: host

  # ---------------------------------------------------------------
  # 7.  Completion summary
  # ---------------------------------------------------------------
  - debug:
      msg: |
        === Zabbix Bootstrap Complete ===
        • API user ‘{{ zbx_api_user }}’ ready (Super-admin role).
        • Host ‘{{ inventory_hostname }}’ registered in group ‘Linux’.
        • Web UI  : http://{{ ansible_default_ipv4.address }}/zabbix/
        • Password: {{ zbx_api_password_effective if zbx_api_password_effective != zbx_api_password else '(the one you supplied)' }}
    no_log: true
    tags: always

#################################################################
# HANDLERS
#################################################################
  handlers:
    - name: reload apache2
      service:
        name: apache2
        state: reloaded
      tags: config
