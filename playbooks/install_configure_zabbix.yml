---
- name: Install & configure Zabbix 5.0 LTS (MySQL/MariaDB)
  hosts: all
  become: true
  gather_facts: true

  collections:
    - community.mysql          # only used _after_ zabbix user exists

  vars:
    # ── Versions & credentials ────────────────────────────────
    zabbix_version: "5.0"

    zabbix_db_name: zabbix
    zabbix_db_user: zabbix
    zabbix_db_pass: zabbix_password      # ← vault/override in prod

    php_timezone: Africa/Casablanca

    # Debian/Ubuntu repo-key paths
    zbx_key_url:  https://repo.zabbix.com/zabbix-official-repo.key
    zbx_key_asc:  /usr/share/keyrings/zabbix.asc
    zbx_keyring: /usr/share/keyrings/zabbix.gpg

  tasks:
  # ───────────────────────────────────────────────────────────
  # Repositories  (unchanged from earlier versions)
  # ───────────────────────────────────────────────────────────
  - name: Add Zabbix repo for RHEL
    ansible.builtin.yum:
      name: >-
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/rhel/
        {{ ansible_distribution_major_version }}/x86_64/
        zabbix-release-{{ zabbix_version }}-1.el{{ ansible_distribution_major_version }}.noarch.rpm
      state: present
    when: ansible_os_family == "RedHat"

  - name: Enable EPEL (RHEL)
    ansible.builtin.yum:
      name: epel-release
      state: present
    when: ansible_os_family == "RedHat"

  - name: Ensure gnupg present (Debian/Ubuntu)
    ansible.builtin.apt:
      name: gnupg
      state: present
      update_cache: true
    when: ansible_os_family == "Debian"

  - name: Map Ubuntu codename → Zabbix series
    ansible.builtin.set_fact:
      zbx_ubuntu_series: "{{ {'jammy':'jammy','focal':'focal','bionic':'bionic'}
                             .get(ansible_distribution_release,'jammy') }}"
    when: ansible_os_family == "Debian"

  - name: Download Zabbix ASCII key
    ansible.builtin.get_url:
      url: "{{ zbx_key_url }}"
      dest: "{{ zbx_key_asc }}"
      mode: "0644"
    when: ansible_os_family == "Debian"

  - name: Convert key to keyring
    ansible.builtin.command:
      cmd: "gpg --dearmor -o {{ zbx_keyring }} {{ zbx_key_asc }}"
    args:
      creates: "{{ zbx_keyring }}"
    when: ansible_os_family == "Debian"

  - name: Add Zabbix APT repository
    ansible.builtin.apt_repository:
      repo: >-
        deb [arch=amd64 signed-by={{ zbx_keyring }}]
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/ubuntu
        {{ zbx_ubuntu_series }} main
      filename: zabbix
      state: present
      update_cache: true
    when: ansible_os_family == "Debian"

  # ───────────────────────────────────────────────────────────
  # Distro-specific paths & package names
  # ───────────────────────────────────────────────────────────
  - name: Set distro-specific variables
    ansible.builtin.set_fact:
      zbx_frontend_pkg: "{{ 'zabbix-web-mysql' if ansible_os_family == 'RedHat'
                                            else 'zabbix-frontend-php' }}"
      zbx_web_srv:      "{{ 'httpd' if ansible_os_family == 'RedHat'
                                     else 'apache2' }}"
      zbx_apache_conf:  "{{ '/etc/httpd/conf.d/zabbix.conf'
                            if ansible_os_family == 'RedHat'
                            else '/etc/apache2/conf-available/zabbix.conf' }}"
      mysql_socket:     "{{ '/var/lib/mysql/mysql.sock'
                            if ansible_os_family == 'RedHat'
                            else '/var/run/mysqld/mysqld.sock' }}"

  # ───────────────────────────────────────────────────────────
  # Install packages
  # ───────────────────────────────────────────────────────────
  - name: Install Zabbix server, agent & MariaDB
    ansible.builtin.package:
      name:
        - zabbix-server-mysql
        - "{{ zbx_frontend_pkg }}"
        - zabbix-agent
        - mariadb-server
        - "{{ 'python3-PyMySQL' if ansible_os_family == 'RedHat'
                                else 'python3-pymysql' }}"
      state: present
      update_cache: true

  # ───────────────────────────────────────────────────────────
  # MariaDB initialisation  (via CLI – no PyMySQL yet)
  # ───────────────────────────────────────────────────────────
  - name: Ensure MariaDB running & enabled
    ansible.builtin.service:
      name: mariadb
      state: started
      enabled: true

  - name: Wait for MariaDB socket
    ansible.builtin.wait_for:
      path: "{{ mysql_socket }}"
      state: started
      timeout: 30

  - name: Create DB & user (idempotent SQL block)
    ansible.builtin.shell: |
      mysql --protocol=socket -uroot <<'SQL'
      CREATE DATABASE IF NOT EXISTS {{ zabbix_db_name }}
        CHARACTER SET utf8 COLLATE utf8_bin;
      CREATE USER IF NOT EXISTS '{{ zabbix_db_user }}'@'localhost'
        IDENTIFIED WITH mysql_native_password BY '{{ zabbix_db_pass }}';
      GRANT ALL PRIVILEGES ON {{ zabbix_db_name }}.* TO
        '{{ zabbix_db_user }}'@'localhost';
      FLUSH PRIVILEGES;
      SQL
    args:
      executable: /bin/bash

  # ───────────────────────────────────────────────────────────
  # Import Zabbix schema once
  # ───────────────────────────────────────────────────────────
  - name: Check if schema already loaded
    stat:
      path: "/var/lib/mysql/{{ zabbix_db_name }}/history.ibd"
    register: schema_present

  - name: Import schema / images / data
    shell: |
      for f in schema.sql.gz images.sql.gz data.sql.gz; do
        gzip -dc "/usr/share/zabbix-server-mysql/$f" | \
          mysql --protocol=socket -uroot {{ zabbix_db_name }}
      done
    when: not schema_present.stat.exists
    args:
      executable: /bin/bash
      creates: "/var/lib/mysql/{{ zabbix_db_name }}/history.ibd"

  # ───────────────────────────────────────────────────────────
  # Verify schema (now we can use PyMySQL with the zabbix user)
  # ───────────────────────────────────────────────────────────
  - name: Count tables
    community.mysql.mysql_query:
      login_user: "{{ zabbix_db_user }}"
      login_password: "{{ zabbix_db_pass }}"
      login_host: 127.0.0.1
      login_db: "{{ zabbix_db_name }}"
      query: "SELECT COUNT(*) AS cnt FROM information_schema.tables WHERE table_schema='{{ zabbix_db_name }}';"
    register: tbl_cnt

  - name: Fail if schema missing
    fail:
      msg: "Schema import failed — only {{ tbl_cnt.query_result[0]['cnt'] }} tables found."
    when: tbl_cnt.query_result[0]['cnt'] | int < 100

  # ───────────────────────────────────────────────────────────
  # Zabbix server configuration
  # ───────────────────────────────────────────────────────────
  - name: Configure /etc/zabbix/zabbix_server.conf
    blockinfile:
      path: /etc/zabbix/zabbix_server.conf
      marker: "# {mark} ANSIBLE MANAGED DB BLOCK"
      block: |
        DBHost=127.0.0.1
        DBPort=3306
        DBName={{ zabbix_db_name }}
        DBUser={{ zabbix_db_user }}
        DBPassword={{ zabbix_db_pass }}
    notify: restart zabbix-server

  # ───────────────────────────────────────────────────────────
  # PHP front-end timezone
  # ───────────────────────────────────────────────────────────
  - name: Ensure PHP timezone in Apache conf
    lineinfile:
      path: "{{ zbx_apache_conf }}"
      regexp: '^php_value +date.timezone'
      line:  "php_value date.timezone {{ php_timezone }}"
    when: stat(path=zbx_apache_conf).stat.exists
    notify: restart webserver

  - name: Enable Apache Zabbix conf (Debian/Ubuntu)
    command: a2enconf zabbix
    when:
      - ansible_os_family == 'Debian'
      - stat(path=zbx_apache_conf).stat.exists
    notify: restart webserver

  # ───────────────────────────────────────────────────────────
  # Enable & start services
  # ───────────────────────────────────────────────────────────
  - name: Ensure web server is running
    service:
      name: "{{ zbx_web_srv }}"
      state: started
      enabled: true

  - name: Restart & enable Zabbix services
    service:
      name: "{{ item }}"
      state: restarted
      enabled: true
    loop:
      - zabbix-server
      - zabbix-agent

  # ───────────────────────────────────────────────────────────
  # Handlers
  # ───────────────────────────────────────────────────────────
  handlers:
    - name: restart zabbix-server
      service:
        name: zabbix-server
        state: restarted

    - name: restart webserver
      service:
        name: "{{ zbx_web_srv }}"
        state: restarted
