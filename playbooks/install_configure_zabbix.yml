---
- name: Install and configure Zabbix 5 LTS (cross-platform)
  hosts: all
  become: yes
  gather_facts: yes

  collections:
    - community.mysql             # MySQL / MariaDB modules

  vars:
    # ── Zabbix + DB settings ─────────────────────────────────────────
    zabbix_version:  "5.0"        # LTS branch we want
    zabbix_db_name:  zabbix
    zabbix_db_user:  zabbix
    zabbix_db_pass:  zabbix_password
    php_timezone:    Africa/Casablanca

    # ── Debian/Ubuntu signing-key locations ─────────────────────────
    zbx_key_url:  https://repo.zabbix.com/zabbix-official-repo.key
    zbx_key_asc:  /usr/share/keyrings/zabbix.asc
    zbx_keyring:  /usr/share/keyrings/zabbix.gpg

  tasks:
  # ──────────────────────────────────────────────────────────────────
  # Repositories + signing keys
  # ──────────────────────────────────────────────────────────────────
  - name: Add Zabbix repo (RHEL family)
    ansible.builtin.yum:
      name: >-
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/rhel/
        {{ ansible_distribution_major_version }}/x86_64/
        zabbix-release-{{ zabbix_version }}-1.el{{ ansible_distribution_major_version }}.noarch.rpm
      state: present
    when: ansible_os_family == "RedHat"

  - name: Enable EPEL (RHEL family)
    ansible.builtin.yum:
      name: epel-release
      state: present
    when: ansible_os_family == "RedHat"

  # ── Debian / Ubuntu branch ───────────────────────────────────────
  - name: Ensure gnupg present (needed for de-armor)
    ansible.builtin.apt:
      name: gnupg
      state: present
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: Map unsupported Ubuntu codenames → jammy (22.04)
    ansible.builtin.set_fact:
      zbx_ubuntu_series: "{{ ubuntu_map.get(ansible_distribution_release, 'jammy') }}"
    vars:
      ubuntu_map:
        jammy:  jammy
        focal:  focal
        bionic: bionic
        noble:  jammy        # 24.04 falls back for ZBX 5.0 repo
    when: ansible_os_family == "Debian"

  - name: Download Zabbix ASCII key
    ansible.builtin.get_url:
      url:  "{{ zbx_key_url }}"
      dest: "{{ zbx_key_asc }}"
      mode: "0644"
    when: ansible_os_family == "Debian"

  - name: Convert key to keyring (.gpg)
    ansible.builtin.command:
      cmd: "gpg --dearmor -o {{ zbx_keyring }} {{ zbx_key_asc }}"
    args:
      creates: "{{ zbx_keyring }}"
    when: ansible_os_family == "Debian"

  - name: Add Zabbix APT repository
    ansible.builtin.apt_repository:
      repo: >-
        deb [arch=amd64 signed-by={{ zbx_keyring }}]
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/ubuntu
        {{ zbx_ubuntu_series }} main
      filename: zabbix
      state: present
      update_cache: yes
    when: ansible_os_family == "Debian"

  # ──────────────────────────────────────────────────────────────────
  # Choose family-specific names & paths
  # ──────────────────────────────────────────────────────────────────
  - name: Set OS-specific variables
    ansible.builtin.set_fact:
      zbx_frontend_pkg: "{{ 'zabbix-web-mysql' if ansible_os_family == 'RedHat'
                           else 'zabbix-frontend-php' }}"
      zbx_extra_pkg:    ""                         # none for 5.x on Debian/Ubuntu
      zbx_web_srv:      "{{ 'httpd' if ansible_os_family == 'RedHat' else 'apache2' }}"
      zbx_apache_conf:  "{{ '/etc/httpd/conf.d/zabbix.conf'
                           if ansible_os_family == 'RedHat'
                           else '/etc/zabbix/apache.conf' }}"
    when: ansible_os_family in ['RedHat', 'Debian']

  # ── Pick correct Unix-socket path for root log-in ────────────────
  - name: Set MySQL/MariaDB socket path
    ansible.builtin.set_fact:
      mysql_socket: "{{ '/var/lib/mysql/mysql.sock'
                       if ansible_os_family == 'RedHat'
                       else '/var/run/mysqld/mysqld.sock' }}"

  # ──────────────────────────────────────────────────────────────────
  # Install all required packages
  # ──────────────────────────────────────────────────────────────────
  - name: Install Zabbix server, frontend, agent, DB & driver
    ansible.builtin.package:
      name: >-
        {{ [
             'zabbix-server-mysql',
             zbx_frontend_pkg,
             'zabbix-agent',
             'mariadb-server',
             ( 'python3-PyMySQL' if ansible_os_family == 'RedHat'
               else 'python3-pymysql' ),
             zbx_extra_pkg
           ] | select('truthy') | list }}
      state: present
      update_cache: yes

  # ──────────────────────────────────────────────────────────────────
  # MariaDB setup
  # ──────────────────────────────────────────────────────────────────
  - name: Ensure MariaDB is running
    ansible.builtin.service:
      name: mariadb
      state: started
      enabled: yes

  - name: Create Zabbix database
    community.mysql.mysql_db:
      name: "{{ zabbix_db_name }}"
      state: present
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"

  - name: Create Zabbix DB user
    community.mysql.mysql_user:
      name: "{{ zabbix_db_user }}"
      password: "{{ zabbix_db_pass }}"
      host: localhost
      priv: "{{ zabbix_db_name }}.*:ALL"
      state: present
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"

  - name: Import initial schema
    ansible.builtin.command: >
      bash -c "gunzip -c $(ls /usr/share/doc/zabbix-server-mysql*/create.sql.gz) |
               mysql --socket={{ mysql_socket }} -u root {{ zabbix_db_name }}"
    args:
      creates: /var/lib/mysql/{{ zabbix_db_name }}/users.ibd

  # ──────────────────────────────────────────────────────────────────
  # Zabbix & web-stack tweaks
  # ──────────────────────────────────────────────────────────────────
  - name: Set DBPassword in zabbix_server.conf
    ansible.builtin.lineinfile:
      path: /etc/zabbix/zabbix_server.conf
      regexp: '^#?DBPassword='
      line: "DBPassword={{ zabbix_db_pass }}"
    notify: restart zabbix-server

  - name: Set PHP timezone for frontend
    ansible.builtin.lineinfile:
      path: "{{ zbx_apache_conf }}"
      regexp: '^php_value +date.timezone'
      line:  "php_value date.timezone {{ php_timezone }}"
    notify: restart webserver

  # ──────────────────────────────────────────────────────────────────
  # Enable & start services
  # ──────────────────────────────────────────────────────────────────
  - name: Enable & start Zabbix services
    ansible.builtin.service:
      name: "{{ item }}"
      state: started
      enabled: yes
    loop:
      - zabbix-server
      - zabbix-agent
      - "{{ zbx_web_srv }}"

  # ──────────────────────────────────────────────────────────────────
  # Handlers
  # ──────────────────────────────────────────────────────────────────
  handlers:
    - name: restart zabbix-server
      ansible.builtin.service:
        name: zabbix-server
        state: restarted

    - name: restart webserver
      ansible.builtin.service:
        name: "{{ zbx_web_srv }}"
        state: restarted
