---
- name: Install and configure Zabbix 5 LTS (cross-platform)
  hosts: all
  become: yes
  gather_facts: yes

  collections:
    - community.mysql

  vars:
    # ── Zabbix & DB settings ──────────────────────────────
    zabbix_version: "5.0"
    zabbix_db_name: zabbix
    zabbix_db_user: zabbix
    zabbix_db_pass: zabbix_password
    php_timezone:  Africa/Casablanca

    # Debian/Ubuntu signing-key paths
    zbx_key_url:  https://repo.zabbix.com/zabbix-official-repo.key
    zbx_key_asc:  /usr/share/keyrings/zabbix.asc
    zbx_keyring:  /usr/share/keyrings/zabbix.gpg

  tasks:
  # ───────────────────────────────────────────────────────
  # Repositories & keys  (same as before) …
  # ───────────────────────────────────────────────────────
  - name: Add Zabbix repo (RHEL family)
    ansible.builtin.yum:
      name: >-
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/rhel/
        {{ ansible_distribution_major_version }}/x86_64/
        zabbix-release-{{ zabbix_version }}-1.el{{ ansible_distribution_major_version }}.noarch.rpm
      state: present
    when: ansible_os_family == "RedHat"

  - name: Enable EPEL (RHEL family)
    ansible.builtin.yum:
      name: epel-release
      state: present
    when: ansible_os_family == "RedHat"

  - name: Ensure gnupg present (Debian/Ubuntu)
    ansible.builtin.apt:
      name: gnupg
      state: present
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: Map Ubuntu codename → series Zabbix 5 supports
    ansible.builtin.set_fact:
      zbx_ubuntu_series: "{{ {'jammy':'jammy','focal':'focal','bionic':'bionic'}.get(ansible_distribution_release,'jammy') }}"
    when: ansible_os_family == "Debian"

  - name: Download Zabbix ASCII key
    ansible.builtin.get_url:
      url:  "{{ zbx_key_url }}"
      dest: "{{ zbx_key_asc }}"
      mode: "0644"
    when: ansible_os_family == "Debian"

  - name: Convert key to keyring
    ansible.builtin.command:
      cmd: "gpg --dearmor -o {{ zbx_keyring }} {{ zbx_key_asc }}"
    args:
      creates: "{{ zbx_keyring }}"
    when: ansible_os_family == "Debian"

  - name: Add Zabbix APT repository
    ansible.builtin.apt_repository:
      repo: >-
        deb [arch=amd64 signed-by={{ zbx_keyring }}]
        https://repo.zabbix.com/zabbix/{{ zabbix_version }}/ubuntu
        {{ zbx_ubuntu_series }} main
      filename: zabbix
      state: present
      update_cache: yes
    when: ansible_os_family == "Debian"

  # ───────────────────────────────────────────────────────
  # OS-specific package names / paths
  # ───────────────────────────────────────────────────────
  - name: Set family-specific vars
    ansible.builtin.set_fact:
      zbx_frontend_pkg: "{{ 'zabbix-web-mysql' if ansible_os_family=='RedHat' else 'zabbix-frontend-php' }}"
      zbx_web_srv:      "{{ 'httpd' if ansible_os_family=='RedHat' else 'apache2' }}"
      zbx_apache_conf:  "{{ '/etc/httpd/conf.d/zabbix.conf'
                           if ansible_os_family=='RedHat'
                           else '/etc/apache2/conf-available/zabbix.conf' }}"
      mysql_socket:     "{{ '/var/lib/mysql/mysql.sock'
                           if ansible_os_family=='RedHat'
                           else '/var/run/mysqld/mysqld.sock' }}"

  # ───────────────────────────────────────────────────────
  # Install packages
  # ───────────────────────────────────────────────────────
  - name: Install Zabbix, MariaDB & dependencies
    ansible.builtin.package:
      name:
        - zabbix-server-mysql
        - "{{ zbx_frontend_pkg }}"
        - zabbix-agent
        - mariadb-server
        - "{{ 'python3-PyMySQL' if ansible_os_family=='RedHat' else 'python3-pymysql' }}"
      state: present
      update_cache: yes

  # ───────────────────────────────────────────────────────
  # MariaDB setup
  # ───────────────────────────────────────────────────────
  - name: Ensure MariaDB running
    ansible.builtin.service:
      name: mariadb
      state: started
      enabled: yes

  - name: Create Zabbix database
    community.mysql.mysql_db:
      name: "{{ zabbix_db_name }}"
      state: present
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"

  - name: Create Zabbix DB user
    community.mysql.mysql_user:
      name: "{{ zabbix_db_user }}"
      password: "{{ zabbix_db_pass }}"
      host: localhost
      priv: "{{ zabbix_db_name }}.*:ALL"
      state: present
      login_user: root
      login_unix_socket: "{{ mysql_socket }}"

  - name: Import initial schema
    ansible.builtin.command: >
      bash -c "gunzip -c $(ls /usr/share/doc/zabbix-server-mysql*/create.sql.gz) |
               mysql --socket={{ mysql_socket }} -u root {{ zabbix_db_name }}"
    args:
      creates: /var/lib/mysql/{{ zabbix_db_name }}/users.ibd

  # ───────────────────────────────────────────────────────
  # Config tweaks
  # ───────────────────────────────────────────────────────
  - name: Set DBPassword in zabbix_server.conf
    ansible.builtin.lineinfile:
      path: /etc/zabbix/zabbix_server.conf
      regexp: '^#?DBPassword='
      line: "DBPassword={{ zabbix_db_pass }}"
    notify: restart zabbix-server

  - name: Check Apache conf exists
    ansible.builtin.stat:
      path: "{{ zbx_apache_conf }}"
    register: zbx_conf_stat

  - name: Set PHP timezone in Apache conf
    ansible.builtin.lineinfile:
      path: "{{ zbx_apache_conf }}"
      regexp: '^php_value +date.timezone'
      line:  "php_value date.timezone {{ php_timezone }}"
    when: zbx_conf_stat.stat.exists
    notify: restart webserver

  # ───────────────────────────────────────────────────────
  # Start & enable services
  # ───────────────────────────────────────────────────────
  - name: Enable & start Zabbix services
    ansible.builtin.service:
      name: "{{ item }}"
      state: started
      enabled: yes
    loop:
      - zabbix-server
      - zabbix-agent
      - "{{ zbx_web_srv }}"

  # ───────────────────────────────────────────────────────
  # Handlers
  # ───────────────────────────────────────────────────────
  handlers:
    - name: restart zabbix-server
      ansible.builtin.service:
        name: zabbix-server
        state: restarted

    - name: restart webserver
      ansible.builtin.service:
        name: "{{ zbx_web_srv }}"
        state: restarted
